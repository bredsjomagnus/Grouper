<?php 
/* Cachekey: cache/stash_default/documentation\api\php\c4fea6ec98d3507e3cd28c48914890fd/ */
/* Type: array */
/* Expiration: 2018-05-27T02:02:27+00:00 */



$loaded = true;
$expiration = 1527386547;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1526979583;
