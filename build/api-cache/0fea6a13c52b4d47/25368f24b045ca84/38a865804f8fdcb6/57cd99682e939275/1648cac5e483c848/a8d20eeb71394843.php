<?php 
/* Cachekey: cache/stash_default/documentation\api\php\688ae920a084dca45aff34d52d0fd109/ */
/* Type: array */
/* Expiration: 2018-05-27T05:22:33+00:00 */



$loaded = true;
$expiration = 1527398553;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1526979191;
