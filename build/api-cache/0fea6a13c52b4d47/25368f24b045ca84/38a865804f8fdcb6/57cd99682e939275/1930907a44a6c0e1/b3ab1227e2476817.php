<?php 
/* Cachekey: cache/stash_default/documentation\api\php\f047d59f36438c039a7afa7c68f5a542/ */
/* Type: array */
/* Expiration: 2018-06-04T16:07:17+00:00 */



$loaded = true;
$expiration = 1528128437;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode('O:33:"phpDocumentor\Reflection\Php\File":12:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"295c305bc178d5c9731c5611b6c2e312";s:39:" phpDocumentor\Reflection\Php\File name";s:20:"0beb0c129d584677.php";s:39:" phpDocumentor\Reflection\Php\File path";s:121:"build/api-cache/0fea6a13c52b4d47/25368f24b045ca84/38a865804f8fdcb6/57cd99682e939275/4dbf08f359077811/0beb0c129d584677.php";s:41:" phpDocumentor\Reflection\Php\File source";s:50724:"<?php 
/* Cachekey: cache/stash_default/documentation\api\php\92b891de62d1c960d97a6ba0f4a4b5a3/ */
/* Type: array */
/* Expiration: 2018-06-05T08:11:03+00:00 */



$loaded = true;
$expiration = 1528186263;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode('TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjI5ZTllOTcyODliNjJiMTRmOGE0YjA3MjMzOWI4ODllIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MjA6ImE0NGM3MTcyYmQzOTk2NzgucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6MTIxOiJidWlsZC9hcGktY2FjaGUvMGZlYTZhMTNjNTJiNGQ0Ny8yNTM2OGYyNGIwNDVjYTg0LzM4YTg2NTgwNGY4ZmRjYjYvNTdjZDk5NjgyZTkzOTI3NS83YWEzOGU0NzkxY2FjNGI4L2E0NGM3MTcyYmQzOTk2NzgucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czozNjg3MjoiPD9waHAgCi8qIENhY2hla2V5OiBjYWNoZS9zdGFzaF9kZWZhdWx0L2RvY3VtZW50YXRpb25cYXBpXHBocFwwNTAyMDgxN2FkNjE1OGM2NWUwMDNmMTRjY2U0MTc3Mi8gKi8KLyogVHlwZTogYXJyYXkgKi8KLyogRXhwaXJhdGlvbjogMjAxOC0wNi0wNVQwMDoxMzoxNSswMDowMCAqLwoKCgokbG9hZGVkID0gdHJ1ZTsKJGV4cGlyYXRpb24gPSAxNTI4MTU3NTk1OwoKJGRhdGEgPSBhcnJheSgpOwoKLyogQ2hpbGQgVHlwZTogb2JqZWN0ICovCiRkYXRhWydyZXR1cm4nXSA9IHVuc2VyaWFsaXplKGJhc2U2NF9kZWNvZGUoJ1R6b3pNem9pY0dod1JHOWpkVzFsYm5SdmNseFNaV1pzWldOMGFXOXVYRkJvY0Z4R2FXeGxJam94TWpwN2N6bzBNem9pQUhCb2NFUnZZM1Z0Wlc1MGIzSmNVbVZtYkdWamRHbHZibHhRYUhCY1JtbHNaUUJrYjJOQ2JHOWpheUk3VGp0ek9qTTVPaUlBY0dod1JHOWpkVzFsYm5SdmNseFNaV1pzWldOMGFXOXVYRkJvY0Z4R2FXeGxBR2hoYzJnaU8zTTZNekk2SW1NNVlqSmhZVFl6TjJVMVl6QXhaakE0TVRsa056azBNell3Tm1GaE1tUXhJanR6T2pNNU9pSUFjR2h3Ukc5amRXMWxiblJ2Y2x4U1pXWnNaV04wYVc5dVhGQm9jRnhHYVd4bEFHNWhiV1VpTzNNNk1qQTZJakE0Wm1SaU1qaGxaREk0TURnMFpqSXVjR2h3SWp0ek9qTTVPaUlBY0dod1JHOWpkVzFsYm5SdmNseFNaV1pzWldOMGFXOXVYRkJvY0Z4R2FXeGxBSEJoZEdnaU8zTTZNVEl4T2lKaWRXbHNaQzloY0drdFkyRmphR1V2TUdabFlUWmhNVE5qTlRKaU5HUTBOeTh5TlRNMk9HWXlOR0l3TkRWallUZzBMek00WVRnMk5UZ3dOR1k0Wm1SallqWXZOVGRqWkRrNU5qZ3laVGt6T1RJM05TODBaRFkyTkdRMVl6Y3dOekE1WkRBM0x6QTRabVJpTWpobFpESTRNRGcwWmpJdWNHaHdJanR6T2pReE9pSUFjR2h3Ukc5amRXMWxiblJ2Y2x4U1pXWnNaV04wYVc5dVhGQm9jRnhHYVd4bEFITnZkWEpqWlNJN2N6b3lOalE0TkRvaVBEOXdhSEFnQ2k4cUlFTmhZMmhsYTJWNU9pQmpZV05vWlM5emRHRnphRjlrWldaaGRXeDBMMlJ2WTNWdFpXNTBZWFJwYjI1Y1lYQnBYSEJvY0Z3eU5qYzNOalJrTldZMk5qVmhZVFE1T1dJd1lURTRNRFkxWWpNNU1UZ3pPQzhnS2k4S0x5b2dWSGx3WlRvZ1lYSnlZWGtnS2k4S0x5b2dSWGh3YVhKaGRHbHZiam9nTWpBeE9DMHdOaTB3TkZReU1qb3lNem93TUNzd01Eb3dNQ0FxTHdvS0Nnb2tiRzloWkdWa0lEMGdkSEoxWlRzS0pHVjRjR2x5WVhScGIyNGdQU0F4TlRJNE1UVXdPVGd3T3dvS0pHUmhkR0VnUFNCaGNuSmhlU2dwT3dvS0x5b2dRMmhwYkdRZ1ZIbHdaVG9nYjJKcVpXTjBJQ292Q2lSa1lYUmhXeWR5WlhSMWNtNG5YU0E5SUhWdWMyVnlhV0ZzYVhwbEtHSmhjMlUyTkY5a1pXTnZaR1VvSjFSNmIzcE5lbTlwWTBkb2QxSkhPV3BrVnpGc1ltNVNkbU5zZUZOYVYxcHpXbGRPTUdGWE9YVllSa0p2WTBaNFIyRlhlR3hKYW05NFRXcHdOMk42YnpCTmVtOXBRVWhDYjJORlVuWlpNMVowV2xjMU1HSXpTbU5WYlZadFlrZFdhbVJIYkhaaWJIaFJZVWhDWTFKdGJITmFVVUpyWWpKT1EySkhPV3BoZVVrM1ZHcDBlazlxVFRWUGFVbEJZMGRvZDFKSE9XcGtWekZzWW01U2RtTnNlRk5hVjFweldsZE9NR0ZYT1hWWVJrSnZZMFo0UjJGWGVHeEJSMmhvWXpKbmFVOHpUVFpOZWtrMlNXcFplRTB5VG1wWlYxRXlUbTFOZWxsNldYZE5SRlV4VG1wbk5FOUVZM2RPUkdScFRXcFZkMXBxVVRCSmFuUjZUMnBOTlU5cFNVRmpSMmgzVWtjNWFtUlhNV3hpYmxKMlkyeDRVMXBYV25OYVYwNHdZVmM1ZFZoR1FtOWpSbmhIWVZkNGJFRkhOV2hpVjFWcFR6Tk5OazFxUVRaSmFsVXpXWHBOZUUxcVFUVmFiVTE1V2xSSmVVOVVXWFZqUjJoM1NXcDBlazlxVFRWUGFVbEJZMGRvZDFKSE9XcGtWekZzWW01U2RtTnNlRk5hVjFweldsZE9NR0ZYT1hWWVJrSnZZMFo0UjJGWGVHeEJTRUpvWkVkbmFVOHpUVFpOVkVsNFQybEthV1JYYkhOYVF6bG9ZMGRyZEZreVJtcGhSMVYyVFVkYWJGbFVXbWhOVkU1cVRsUkthVTVIVVRCT2VUaDVUbFJOTWs5SFdYbE9SMGwzVGtSV2FsbFVaekJNZWswMFdWUm5NazVVWjNkT1IxazBXbTFTYWxscVdYWk9WR1JxV2tSck5VNXFaM2xhVkd0NlQxUkpNMDVUT0hkWmVrazBXa2RhYTA1NlJYbE9SMHBwV21wR2JFeDZWVE5aZWsxNFRXcEJOVnB0VFhsYVZFbDVUMVJaZFdOSGFIZEphblI2VDJwUmVFOXBTVUZqUjJoM1VrYzVhbVJYTVd4aWJsSjJZMng0VTFwWFduTmFWMDR3WVZjNWRWaEdRbTlqUm5oSFlWZDRiRUZJVG5aa1dFcHFXbE5KTjJONmIzaFBSRmsxVFdwdmFWQkVPWGRoU0VGblEyazRjVWxGVG1oWk1taHNZVEpXTlU5cFFtcFpWMDV2V2xNNWVtUkhSbnBoUmpscldsZGFhR1JYZURCTU1sSjJXVE5XZEZwWE5UQlpXRkp3WWpJMVkxbFlRbkJZU0VKdlkwWjRiVTVYVW14WmVsWnJUa2RaTWxwcVl6Tk5WMDE2VFdwak1FOVVhR3hOTWxWNFRrUlJNVTV0U20xT2FUaG5TMms0UzB4NWIyZFdTR3gzV2xSdloxbFlTbmxaV0d0blMyazRTMHg1YjJkU1dHaDNZVmhLYUdSSGJIWmlhbTluVFdwQmVFOURNSGRPVXpCNVRteFJlVTFFYjNoUFZHOTVUWGx6ZDAxRWIzZE5RMEZ4VEhkdlMwTm5iMnRpUnpsb1drZFdhMGxFTUdka1NFb3hXbFJ6UzBwSFZqUmpSMng1V1ZoU2NHSXlOR2RRVTBGNFRsUkpNMDE2V1RGUFZGbDZUM2R2UzBwSFVtaGtSMFZuVUZOQ2FHTnVTbWhsVTJkd1QzZHZTMHg1YjJkUk1taHdZa2RSWjFaSWJIZGFWRzluWWpKS2NWcFhUakJKUTI5MlEybFNhMWxZVW1oWGVXUjVXbGhTTVdOdE5HNVlVMEU1U1VoV2RXTXlWbmxoVjBaellWaHdiRXRIU21oak1sVXlUa1k1YTFwWFRuWmFSMVZ2U2pGU05tSXpjRTVsYlRsd1dUQmtiMlF4U2toUFYzQnJWbnBHYzFsdE5WTmtiVTV6WlVaT1lWWXhjSHBYYkdSUFRVZEdXRTlZVmxsU2EwcDJXVEJhTkZJeVJsaGxSM2hLWVcwNU5GUlhjSGRPTWs0MllucENUbVZ0T1hCUlZXaERZakpPUmxWdVdscE5NVm93VjJ4ak1VMUhTWHBUYlU1V1lsWmFkRmxyWkZkaGJWSklZa2hhYVdKSWFGSlpWV2hEV1RGS2RHSklUbUZWVlVweVdXcEtUMUV5U2toUFYzQm9aVlZyTTFaSGNEQmxhemx4VkZSV1VHRlZiRUpaTUdSdlpERktTRTlYY0d0V2VrWnpXVzAxVTJSdFRuTmxSazVoVmpGd2VsZHNaRTlOUjBaWVQxaFdXVkpyU25aWk1GbzBVakpHV0dWSGVFSlNNbWh2V1hwS2JtRlZPSHBVVkZwT1pXdHJNbE5YY0c1bGJHeFZZa2RvVG1GclduRlhhMUpYWVVad2NWZHRjRnBsYXpFelYxZHdXbVZzY0VoWFZFcFBaV3hhZEZkWWNHOWhNWEJGVTFoc1NtRnVValpVTW5CT1RsVTVjRk5WUm1wU01tZ3pWV3RqTldGdFVsaE5WM2hwWW14S01sa3llRFJWTVhCWVYyNU9ZVll3TkhkWlZtTTFaRlpvUjFGdE9XcFNibWhJV1Zaa05HSkZSa2hPVjJocFZqRldjRlI2VGs1T2F6RnhVVlJhU21GclNuQlVNRkp1VFd4d1ZWTlVTbHBsYldRMVYydFNTMkZGTVZWUldGWnFVakpvTTFOWGNEQmxhemx4VkZSV1VHRlZiRUpaTUdSdlpERktTRTlYY0d0V2VrWnpXVzAxVTJSdFRuTmxSazVoVmpGd2VsZHNaRTlOUjBaWVQxaFdXVkpyU25aWk1GbzBVakpHV0dWSGVFSlRSVXB2V2tWa2JtRlZPSHBVVkZwT1ZrVnNORlF5YkV0aFYxSllZa2hPWVZGNmJHOVpNR1J5WkVacmVWSnRjR2hTTVZZeVZGVmtZV0pHYkZWWGJXaE9Wa1UxY1ZSc1VrdGhWVFZJVlZSQ1QyVlVhRFZVYkZKT1RXczVTRmRZYkU5U01Hd3pWR3RTVjJGc2JGVmFla0pOWldzd01GZFdVbTVOYXpWVldqTmtUMUl4YXpCWGJURlRZV3hzY1ZkWVdrOVdSMUp4VjJ0U2NrNVZOWEZhTTJ4aFZrZDBObFF4VWtwTk1EVlVUMFJXVG1GdFRYcFhXSEJxVFVac05sSllaRnBpVmxWM1YxWlNTMkV3ZURaUmJXeFFVa2RqZVZkc1VrcE5iR3cyV2pOc1lWSkZjRzlVVmxKQ1pGZE9TR0ZJWkVwaGJsSTJWREp3VW1WRk9YQlRWVVpxVWpKb00xVnJZelZoYlZKWVRWZDRhV0pzU2pKWk1uZzBWVEZ3V0ZkdVRtRldNRFIzV1Zaak5XUldhRWRSYlRscVVtNW9TRmxXWkRSaVJVWkpWRzVhYTFkRmNIRlhiRTVLVGpKT05tSXphRTVoYldOM1ZEQlNkbUZXUWtWUFdHUm9VMFZHYmxFeWF6UmpWV3hHVkcxb1drMXRhSE5aVkVwWFRsVTVjRkZ0Y0ZwV01EVjJWMnhOTldWdFVraFNibkJvVW1wc2NsZHNaR0ZoUjFKWVpVUkNUVTFzU2pKWFZFNVhaRVp3V0U1VVFscFhSa3AzV1dwSk1Wa3hiRmxSYmtKWlUwVktkbGt3V2pSaVJteFZXVE5rV2xaR1ZYcFViWEJYWVRGc2RGSnRiRkJXTVhCeVZEQlNRbVZyTVhSVVdHaGhVa1pHTmxReFVsWmxWVEZZVlcxc1VGRjZhRzVUTW1zMFV6QjROV0l5WkZkVFIzZ3pWMnhTZGxveGJGbFRibXhhVjBkMGJsTXlhelJUTUhnMVlqSmtVMWRIYUROWlZtaExZVWRTU0dKSVdtbGhiVGx1VkZkd1FtVkZPVVJOU0dSUFZYcENOVlJxUmxKa01ERTJZak5zVG1GdE9IZFVWMng2WkRBeFJXSXpaRTVSTUVaNFZFaGtkbE13VG01aU1uUnBVbnBzYjFkclpGZGhNR3hGVFVka2ExTkZiM2hYYkZKNlV6QndTRlpxVW1wU01uZzFWMVpvVTJOSFNYbE9SMlJSVlRCR05GUnNVa3BOTURFMllUTm9UbVZzYkRWVU0yUjJVekJ3U0ZWdGFHdFNNRlp1VlVaT1EyRkhUblZUYldoc1ZUSmtkMVF6WkhaVE1IZzFZakprVWsxdGFIZFphMlJTV2pGYVNXSklaR0ZXUnpsdVdXcEtTMk5XY0ZoVWFrSktVVEk1TWxFeWJGTmhNV3haVlcxb1dHVlhValZYYkdoVFRWZE9kRTVITlZsVk1FVTFVMVZvVjJSWFRYbFdibXhvVmpCYWVsbFdhSGRpUlhSSVUyMW9hazFzVlhsVWExazFZVEZ3V0ZSdVdtRlNNVloyVTJwR1UwNXRTWHBqUlRWc1lsUnNkMWRVUW10aU1sRjRVMnRvVUZZelFuSldibkJIWXpGc2RFNVdUbXRpVlRWNldsVmFUMWxXV1hoalNIQllZa2RTVUZSVlpFZFhSVGxaVm14c1UyRXdjREpYVkVKaFRrWkplVkpzYUd4U00yaExXVmN3TlU1R1VsaGpTR1JQVFdzME1sbHVjRU5VYlZaMFQxaENVbFpYYUVSWmFrcFBVbXhXZFZkc2NFNU5WbTkzVmpKNGFrMVZNVWhUV0hCVVlsVTFWMWxzV21Ga1JteHlXa1prYUdKV1NrbFphMmhoWVZkS1NXRkdTbHBXVjJoRVYxUkdTMlJIU2tsVWJVWldWbFZ3ZVZkWGNFdFVNVVY1VTJ0b1VGWXpRbTlhVmxaeVRURmFTR05FUW14aGVteDRWa1pTVjFWSFJsWmlSVXBhVFVkU2RscEVSa3RUUlRsWVkwZDBWMlZyV25wWFZ6QXhWVEpTZEZSdVRteFNhelZvVm1wR2QyVnNaSE5hUlRsT1VqQmFXVlF4YUZkWFZrcHlVMjVhV2sxR2J6QlZha3BIVjBkV1NHVkZTbE5OYldoMlYxaHdTMkp0UmxaUFNIQlZWa1p3VDFwWGRISk5iRTVZWTBWd2EwMVhkekpWVm1oM1dWWmFSMUpVUWxoaE1sSlVXVlZWZUZaV1pGVlRhemxwVmxSV2QxWXllRk5oYlZaelkwWldWRlpGY0U5VVYzUlhUa1prV0dOSE5VOVdia0l3VmpJeE5GTnRSblZWYWxwVlRXNUNUMVJzVlRWalJrNVdVbTF3VTAxdFozcFdWM1JxVGxkR2RGVnNhRTVXTTJod1dXMTRTMDFzYTNsbFJGSldUVmhDV1ZZeU5VOVpWbGwzVGtoa1dsWnRUVEZhUmxwdlVqRkdkRTlYY0ZOaWJXaEpWMVphYTA1SFNrWlNhMmhQVmpKb2NGWnFSbGRqUmxJMlZHczFUMkY2VlRKWmFrcHpWMnhrUmxOcVRsVlNlbFpFV1dwS1QxSkdUbFZhUjNCc1lsUnJNbFpFUmxOa2JVWldVbXRzVW1KVWJIRlZiRnBMVFd4a1ZWUnNaR3RTYmtKWlZHeFNRMkZWTUhkalIzQlhWbnBHV0Zsc1pFdFRSbHAwWTBkMFUwMXVaM2xYVnpFMFRrWldXRkpyYkZKaVZUVlVXV3hrTkdWc1pITlNhMDVyVFZkNFdsWlhNRFZUYlVaMVZXcGFWVTF1UWtkVVZWVTFZMFpPZEdOSGJFNWhiRm93VjFaYWEyRnRVbk5pUm14U1ltMVNUbGx0ZEV0a2JHdDNWR3R3VDAxck5ESlpibkJEVkd4YVNFOVlRbEpXVjJoRVdXcEtUMUpzVm5WWGJIQk9UVlp2ZDFZeWVHcE5WVEZJVTFod1ZHSlZOVmRaYkZwaFpFWnNjbHBHWkdoaVZrcEpXV3RvWVdGWFNrbGhSa3BhVmxkb1JGZFVSa3RrUjBwSlZHMUdWbFpWYnpKWFYzQlBWakpXVjJFemJGZFdNbmhSVkZSQmQwMXNVWGRWYkZwUFVsUlZNbGxxU25OVlZrcEZZa1JPV2xaWGFFTlZla0pQWkZaT2RHVkhkRlJTYkc4eFYxY3hjMUV4YkhKVWJUVnBUVzFTUzFWVVFrZGliRkpKWWtoYVZFMUhlRVZWVm1SclUyeE9TVnBFUWxWU2F6RXpXa1ZXTkZaRk1VbFZhekZXWld0SmQxWkZXazVrTWxKR1pVWlNUbE5HU2s1V1dIQkRUVVpTUjFSWVpHdFNXR2hWVkZWb1UxUldWalpSYWtKVlVtc3hNMXBGVmpSV1JURkpWV3N4Vm1WclNYZFdSVnBPWkRKU1JtVkdVazVUUmtwT1ZsaHdRMDFHVWtkVVdHUnJVbGhvVlZSVmFGTlVWbFkyVVdwQ1ZWSnJNVE5hUlZZMFZrVXhTVlZyTVZabGEwbDNWa1ZhVG1ReVVrWmxSbEpPVTBaS1RsWlljRU5OUmxKSFVtNWFZVTFIZUVWVlZtUnJZbFpGZDFOclRscE5SMmhFV1hwS1IxZEdVblJoUjNSVFRXNW5lVmRYTVhOUk1WRjRZa1pvVGxZemFFVlpWbFpIWW14T1ZsUnJUbEJTV0doVlZGVm9VMVJXVmpaUmFrSlZVbXN4TTFwRlZqUldSVEZKVldzeFZtVnJTWGRXUlZwT1pESlNSbVZHVWs1VFJrcE9WbGh3UTAxR1VrZFVXR1JyVWxob1ZWUlZhRk5VVmxZMlVXcENWVkpyTVROYVJWWTBWa1V4U1ZWck1WWmxhMGwzVmtWYVRtUXlVa1psUmxKT1UwWktUbFpZY0VOTlJsSkhWRmhrYTFKWWFGVlVWV2hUVkZaV05sRnFRbFZTYXpFeldrVldORlpGTVVsVmF6RldaV3RKZDFaRldrNWtNbEpHWlVaU1RsSllVa3RWVkVKSFlteE9WbUZFVGxSTlIzaEZWVlprYTFOc1RrbGFSelZYWVRKU2Rsa3daRTlPVmtaeFUyeHdWMDB5WkRSV01uaFBVVEpPU0ZScVZsSmhhMHB2VldwR1YySnNiSFJOVldSclVtNUNWVlZYTldGWlYwWldVMVJHV21Gck5WaGFWbFp6VTBaS2RWcEhjRk5OTW1nelZqRlNTMUl3TVVoU2JHaFFWMFphVGxsV1ZrdFdiR3hXV2toT2JHRXllRXBXTWpGdllWWk9SMWR1VGxSV1YxSjZXbGQwYzFOV1duVmpSMFpYVFZWYWRWZHJVa3RpTWtwSVUyNUNVbUZyU205VmFrWlhWRVpPVmxSclNtRk5SM2hLV2tSS2ExbFhTbkpqUnpsYVlrZFNXRlJVU2twbGJFNTFVMnR3VTJWc1ducFdNbmhyVlRKV2NtSkZiRlppYkhCTFZUQldTMlZzWkZkYVJUbHBVbGQ0U2xaWE1EVlpWbFYzVTIwNVdrMUhhRVJaZWtwSFYwWlNkR0ZIZEZOTmJtZDVWMWN4YzJFeVZuSmlSV2hQVmpKb2NGWnFSbGRpYkd4WFdYcENZVTFYZUZWVlZ6VlhZVlV3ZUZOdVpGaGlWRVo2V1ZkNGMxZFdWblZSYld4T1lXeEtkVmRYY0U5VGJFMTNZa1ZTVWxZeVVrdFZNR2hyWW14a1YxbDZSazlXVjNoSlZERlNRMkZHU1hoWGFsWlVWbGRSTUZwSGVISmxWa3B4VVcxb1YyVnRkM2hWTVZaclVqSldjbUpGYkZSaVdHaHhWakJhWVdReGEzbE5WbVJvVFVkNFNWVXljRmRUYkU1SFUyNWFXR0pGTlVSWlZXUlBVMVpHZFZSdGFGZE5SRloyVjJ0V2EyTXlVblJUYmtKU1lteHdjVmxXVmt0a01YQkdZVVUxWVUxck5VbFZiVEYzWVVVeGNsZHVWbGhpUjJoUFdrWldUMk5HUmxoYVJYQlNUVVZyTUZWVVNuTlJiRzkzWWtWU1VsZEZXazVhUkVrMVZFWk9WbFJyU21GTlIzaEZWMnRvVjFkc1dqWlNiazVVWW0xNFExUXhXa05qUmtaMFpVZHNhV0pIZURKVk1uQkRVakZXVjFaclpGQldWR3hUVm14U1IxSXhUblZpUkU1aFRVYzVNMXBWWkc5aGJVcFdWMWhzV0dKSFVYcFpiWFF3VmtkUmQyUkZVbWhXVlZwMVZURldUMUZ0VW5Ka1J6VnBUVzFTUzFWVVFrZGliSEJ5VkZoa2ExSllhRlZVVldoVFZGWldObEZxUWxWU2F6RXpXa1ZXTkZaRk1VbFZhekZXWld0SmQxWkZXazVrTWxKR1pVWlNUbE5HU2s1V1dIQkRUVVpTUjFSWVpHdFNXR2hWVkZWb1UxUldWalpSYWtKVlVtc3hNMXBGVmpSV1JURkpWV3N4Vm1WclNYZFdSVnBPWkRKU1JtVkdVazVUUmtwT1ZsaHdRMDFHVWtkVVdHUnJVbGhvVlZSVmFGTlVWbFkyVVdwQ1ZWSnJNVE5hUlZZMFZrVXhTVlZyTVZabGEwbDNWa1ZhVG1ReVVrWlVia0pTVmpKU1MxVlVRa3BPUms1V1ZtdGthMDFyTlVsYVZXaERWMnN4Y2xkWVpGcFdiVTB4V2taV2MxSnNXblZXYlhScFZqTm5NVmRYY0VwTlYxSkhZMFpvVDFaRlNrVlpWbFpIWW14T1ZsUnJUbEJTV0doVlZGVm9VMVJXVmpaUmFrSlZVbXN4TTFwRlZqUldSVEZKVldzeFZtVnJTWGRXUlZwT1pESlNSbVZHVWs1VFJrcE9WbGh3UTAxR1VrZFVXR1JyVWxob1ZWUlZhRk5VVmxZMlVXcENWVkpyTVROYVJWWTBWa1V4U1ZWck1WWmxhMGwzVmtWYVRtUXlVa1psUmxKT1UwWktUbFpZY0VOTlJsSkhWRmhrYTFKWWFGVlVWV2hUVkZaV05sRnFRbFZTYXpFeldrVldORlpGTVVsVmF6RldaV3RKZDFaRldrNWtNbEpHWlVaU1RsSllVa3RWVkVKSFlteE9WbUZFVGxSTlIzaEZWVlprYTFOc1RrbGFSelZYWVRKU2Rsa3daRTlPVmtaeFUyeHdWMDB5WkRSV01uaFBVVEpGZUdOR2JGWmlXR2h4V1d4U1IyUXhiSFJOVm1Sc1lUSjRTbFpYTURWWlZsVjNVbTVDV0dKSFRYaFVWekZIVjFaT2RWZHRiR2xXUlZwNlYxY3dNVlZ0UmxaaVJXeHBVMFp3Y2xZd1ZuTmliR1JYWVVWT2EwMXJjRWxaYTJSM1YyeGtSMU51WkZwaGEydDNWMnBLUjFkV1VsaGFSbkJPVFZadk1WZFVTWGhXTWxKWVZXdG9iRkpHV2tWWlZsWkhZbXhPVmxSclRsQlNWM2hLVlRKd1IyRlhTbFZXYm1SYVlsUkdjVmRxU2tkWFJUVkpWbXR3VTJKRmNESlhWbHB2Vkd4dmVWTnNhRk5oYkZwTFZXcEdTMk14Y0VaYVJtUnNWakJ3V1ZscmFGZFpWbFYzVTI1YVdtRnJOWEZYYWtwWFYwVTVWVkpyY0ZSU1ZXOHhWako0YTFsWFNraFVia0pTWVd0S2NGcFdWa3RqVm14eFUxUkdhVll3V2xsWGExSkhZVzFLVjFadE5XRlNla1pJV2xaa1IxZEZPVlZTYlhCclRXcHNkVlV4Vms5UmJHOTVWMnRTVW1KdVFtaFdNRloyWlZac1YxcEZPV2xTTURReFZWZHdWMkZWTUhoWGFsWlVWbGRTU0ZwRVNrOVRSMVpKVVd4d1RtRXhiRE5YVmxwcVRsZFNWbUpGYkZkaGEwcHZWbXBPYjJReGNGaE5WbVJzWVROb2QxVlhlRk5aVm1SSFVtMDFZVkpYVW5aWk1HUlBUbFpHZFZGdGJHaFdWV3Q0VjFkd1QxWXlWbFppUlZKVVYwWmFhRlp1Y0ZabFZrNVlZa1ZPYVZZd1dsbGFWV1EwVkZadmVVOVhOVlJXVlRWRFYycEtZVkZ0U1hsYVJYQlNUVVZhZFZWNlNuSk9SazEzVkc1Q1VsWXlVa3RWVkVKSFpGWmtjMWw2Ums1aE0wRXhWVlpTYzFWWFJsWlRiazVhWWxSV1lWbHFRblprTVVwelVteGFVMkZ0ZUVoV2EyUTBWMjFLY21WRlVsSldlbFp4VlRCV2QwMXNaSEpoUm1Sb1lsWktTVmxyYUdGaFYwWllWRzVrVlZKVldqSlZla0p6VWtaR1dGcEZjRkpsYldnMFZWUktjMUZzYjNkaVJWSlNZVzFvVGxaWWNFTk5SbEpIVkZoa2ExSllhRlZVVldoVFZGWldObEZxUWxWU2F6RXpXa1ZXTkZaRk1VbFZhekZXWld0SmQxWkZXazVrTWxKR1pVWlNUbE5HU2s1V1dIQkRUVVpTUjFSWVpHdFNXR2hWVkZWb1UxUldWalpSYWtKVlVtc3hNMXBGVmpSV1JURkpWV3N4Vm1WclNYZFdSVnBPWkRKU1JtVkdVazVUUmtwT1ZsaHdRMDFHVWtkVVdHUnJVbGhvVlZSVmFGTlVWbFkyVVdwQ1ZWSnJNVE5hUlZZMFZrVXhTVlZyTVZabGEwcE5WVEZXVDFGc2IzZGlSV3hyVFcxU1UxWXdWa3ROTVd4eVdraE9hR0pIZUZwV1Z6VkRZVlV4Y1ZWdE5WWmhNbEpZV1Zaa1UxZEdhM2xhUmxaWFpXMTRlVll5ZUVka2JHOTNZa1ZTVWxZeVVuUlZXSEJEVFVaU1IxUllaR3RTV0doVlZGVm9VMVJXVmpaUmFrSlZVbXN4TTFwRlZqUldSVEZKVldzeFZtVnJTWGRXUlZwT1pESlNSbVZHVWs1VFJrcE9WbGh3UTAxR1VrZFVXR1JyVWxob1ZWUlZhRk5VVmxZMlVXcENWVkpyTVROYVJWWTBWa1V4U1ZWck1WWmxhMGwzVmtWYVRtUXlVa1psUmxKT1UwWktUbFpZY0VOTlJsSkhWRmhrYTFKWWFGVlVWV2hUVkZaV05sRnFRbFZTYXpFeldrVldORlpGTVVsVmF6RldaV3RKZDFWVVNuTlJiRzkzWWtWU1VtRnRhRVZaVmxaSFlteE9WbFJyVGxCU1YzaElWMnRqTlZsV1dqWlZiVFZoVm0xTk1WUldaRTlqUmtaMFlVZHdWRkpWY0RaWFZscHJWREpHU0ZWcmFHbFRSbkJ3V1ZaV1MyUXhhM3BpUlU1cVVqQndkMVZYTVRCWlZsbDNZak5vV0dKdGVFUmFSV1JLWlZaV2RHVkZNVkpOUlhCNVZqSjRiMVV5UmtoU2JHaHNVak5vYUZWVVFrdGpNV3Q1VGxWMGEySlZOWGRWVnpWVFdWWmtSazVVV2xoV2JWSnlXV3RrVDA1V1JuRlViV2hZVW10d01sVlVTbk5SYkc5M1lrVlNVbUZ0YUV0Vk1GVXdaREZrVjFwRk9XcGhNbmhLVmxjMWMxZHNXWGRPV0U1YVRUSjRSRlJVU2tkWFIxWkpWR3R3VTAxSVFucFZNVlp2VkRKSmVWTlljR0ZUUmxwTFZXNXdjMDFXVGxaYVJtUk9Za2hDV2xVeWNGZFRiRWw0VjJwV1drMXFRVEZhVmxaelUxWldkRTlXY0ZoU2ExcDFWMWR3UzFReVJuUlZiR3hVWW01Q1MxVXdaRk5rTVhCR1drYzVhbEl3Y0hkVlYzQlhZVlV3ZUZkcVZsSk5iWGhEVjJwQ2MxSkdSbkZoUlhCVFRVWnZlbGRVUW10T1IwNUhZVE5zVTJGclNtOVdibkJ6VFZaU1NHSkZUbFJpU0VKM1ZWY3hNR0ZHWkVaT1Z6bFlWbnBGTUZsclduZFNSMUY1V2tad1ZrMUZiekpYVmxwcVpVZFJlVk5yYUZkV01sSm9WRmQ0WVUxV1pITmhSWFJxVW0xM01WVlhNVFJoYlVweVkwUktXazF0ZUVSYVJFWnpWMFp3U0dWRmNGTk5ibWN5VlRGV2IxUXlTWGxUV0hCaFUwWmFUbGRxU1RWaWJFNVdWR3RLWVUxc2NFTlpha3ByVTJ4RmQxSnROVlJOYlhNd1ZYcENUMk5HUmxoYVJYQlNUVVZhTVZZeWRHdFdNa1pZVld4b1drMXFWa3RWYTFKQ1kyeE9WbHBHWkd0V01VcDNWMnBKTVZWc1duSlRiRXBZVWtWS1ZGVnRlRWRqTVZweVlVVjBiRmRIVW5WV01qQjRVakpOZVZSWWJGZFhSVXBPVlZaak5WUkdUbFpVYTBwaFRVZDRSVlF3YUVkU1IwWldVbTAxVkZaVk5VUlVNRlkwVmtVeFNWVnJNVlpsYTBsM1ZrVmFUbVF5VWtabFJsSk9VMFpLVGxaWWNFTk5SbEpIVkZoa2ExSllhRlZVVldoVFZGWldObEZxUWxWU2F6RXpXa1ZXTkZaRk1VbFZhekZXWld0SmQxWkZXazVrTWxKR1pVWlNUbE5HU2s1V1dIQkRUVVpTUjFSWVpHdFNXR2hWVkZWb1UxUldWalpSYWtKVlVtc3hNMXBGVmpSV1JURkpWV3N4Vm1WclNYZFdSVnBPWkRKU1JtVkdVazVUUmtwT1ZsaHdRMDFHVWtkVVdHUnJVbGhvVlZSVlZqQlRiRVYzVW0wMVZGWlhaM3BYYWtaSFYxWkdkVnBIYkZOTmJtaDRWakZhYjFVeVRraFRXR3hQVWpKU1dGWnRkSGRVYkVWNVlrVktZVTFIZUVWVlYzQnZWRlpXTmxGcVFsVlNhekV6V2tWV05GWkZNVWxWYXpGV1pXdEpkMVpGV2s1a01sSkdaVVpTVGxOR1NrNVdXSEJEVFVaU1IxUllaR3RTV0doVlZGVm9VMVJXVmpaUmFrSlZVbXN4TTFwRlZqUldSVEZKVldzeFZtVnJTWGRXUlZwT1pESlNSbVZHVWs1VFJrcE9WbGh3UTAxR1VrZFVXR1JyVWxob1ZWUlZhRk5VVmxZMlVXcENWVkpyTVROYVJWWTBWa1V4U1ZWck1WWmxhMGwzVmtWYVRtUXlVa1psUmxKT1UwWktUbFpZY0VOVVJrNVdWR3RLWVUxSGVFcGFSRUl3VTJ4RmQxSnROVlJXVjJkNlYycEdZVk5IUmtsUmJYQnNWbFZ3V0Zac1pEQk5NVzk1VW14c1ZWWXlVbkpXTUZVeFl6RmtjbFJyVG1oV01WcFZWVmR3UTJGR1NYaFdiVFZZVmtWck1WcEdaRTVsVlRsWlZHMUdWazFGYkROWFZ6VnpVVEpSZVZSdVVsQlhSMUpvVmpCV2QyVnNjRmRVYTA1cFlraENXVlJzWkRSaGJVcFdWMWhrV0dKRk5VUldiWGhYWTIxV1NXTkZjRlJTTVVveVZqSjRhazFHYjNsVmJHeFZZbXRLY0Zsc1pFOVVSazVXVkd0S1lVMUhlRXBhUkVwcllURkplV0ZJVGxSV1ZscElXbFprVTFOSFNrbGpSbkJYWld4S2RWWXhVa3BPVjFKSVUyeG9VMkpzV21oVlZFSkxaV3hzVjFsNlJtbFNWM2hLVmxjMVlXRlZNWFZhUkVaVVZsWndlbHBITVZOV1JrWjFZMGRvVTJWdGREUlhWM1JyVld4dmVWUlliRmRoYTBwTFZUQmFTMlJzYkZkaFJUVmhUV3hLU1ZRd1pHdGhNVWw1WVVoT1ZGWlhhRXhhUnpGS1pXeFdXRnBIYkU1aVIzaE5WVEZXVDFGc2IzZGlSV3hyVFcxU2MxWnVjSEpsUm10NVlrVk9hRkl3TlVwVlZ6VlBZVVpaZDA1WE9XRlNWMUo2V2tjeFMyTkdSblZqUjJ4c1ZsVnNNMWRXVm10U01ERkdZa1ZvYVZKRlNrdFZha28wVG14T1ZtRkdaR3hpU0VKWlZsWmthMkV3TVhSaFNFNWFZbGQ0UkZwV1pGTlhSVFZaVm0xb1YyVnNXakZWTVZaWFVqSldXRlZyYUdsVFNFSmhWbTV3VTJKc2NFWmFSV1JzWWxWV05sWkdhRmRTUjBaV1VtMDFWRlpWTlVSVU1GWlBZMFpHV0ZwRmNGSk5SVm8wVmtWb2EyUnNUWGRpUlZKU1ZqSlNTMVZVU2xKbFJtdDVUVlJPYVdFeWVFWlVWVTR3VTJ4SmVGZHFSbUZTTW5oMVdXMTRSMVl4Um5OU2JHeE9WbXh3VlZaclZrOWhiVTEzWWtWU1lWSjZiSEpWTUZwTFRURlJlV0Y2VW10aVZYQkpWREZrZDFkc1dYcGhTRnBhWVdzMVVGUlZWbmRPVjBWNlZHdFNZVTFxYkhWVk1WWlBVV3h2ZDJWRVZtbE5TRkpMVlZSQ1IySnNUbFpoUkU1clVsaG9WVlJWYUZOVVZsWTJVV3BDVlZKck1UTmFSVlkwVmtVeFNWVnJNVlpsYTBsM1ZrVmFUbVF5VWtabFJsSk9VMFpLVGxaWWNFTk5SbEpIVkZoa2ExSllhRlZVVldoVFZGWldObEZxUWxWU2F6RXpXa1ZXTkZaRk1VbFZhekZXWld0SmQxWkZXazVrTWxKR1pVWlNUbE5HU2s1V1dIQkRUVVpTUjFSWVpHdFNXR2hWVkZWb1UxUldWalpSYWtKVlVtc3hNMXBGVmpSV1JURkpWV3N4Vm1WclNYZFdSVnBPWkRKU1JtVkdTbWxOYlZKTFZWUkNSMkpzY0hKVWEwNVNZbFUxU2xWWE5VOWhSbGwzVGxjNVlWSlhVbnBhUnpGTFkwWkdjMVp0YUZkbGExcDZWMnhqZDA1WFVsZGpSa3BwVFcxU1MxVlVRa2RpYkhCeVZGaGthMUpZYUZWVVZXaFRWRlpXTmxGcVFsVlNhekV6V2tWV05GWkZNVWxWYXpGV1pXdEpkMVpGV2s1a01sSkdaVVpTVGxOR1NrNVdXSEJEVFVaU1IxUllaR3RTV0doVlZGVm9VMVJXVmpaUmFrSlZVbXN4TTFwRlZqUldSVEZKVldzeFZtVnJTWGRXUlZwT1pESlNSbVZHVWs1VFJrcE9WbGh3UTAxR1VrZFVXR1JyVWxob1ZWUlZhRk5VVmxZMlVXcENWVkpyTVROYVJWWTBWa1V4U1ZWck1WWmxhMGwzVmtWYVRtUXlVa1pVYmtKU1ZqSlNTMVZVUWtwT1JrVjVZa1ZLWVUxSGVFVlZWM0J2VTJ4S1dHRklUbHBOYWtaWFYycEtWMWRGT1ZWU2EzQlRaV3RhZGxkc1drOVJNbFowVkd0b1YySllRbTlXYWtaMlRWWk9WbUZHVG1sTldFSlZWVmN4TUZsV1dYaGpSemxoVW0xUk1GUlZWbk5UVmxaMVVXMXNWMDFXYTNsWFYzQktUVmRLUm1KRmFGaGliSEJ4V1ZaV1NrMVdiSEZVYkdSc1ZsZDRTVlZ0Tld0aGJFbDZZVWhrV0ZaRmNFaFVWV1JIVjBVNVdWWnJNVkpOUld3MlYxWldhMk15Um5SU2EwcHBUVzFTUzFWVVFrZGliSEJ5Vkd0T1RrMXJXbGxhVldoUFUyeEpkMk5JVGxSV1YyaFlXbGQ0ZDFkR1ZsaGFSbkJwWWxoU2RWZHJWbXRpTWtwR1lrVmtVbUV5ZUZkVlZFSkxZMnhrVjJGR1RtbFNWM2hKVlcwMVYxbFdSWGRUYmtwWVZtMW9WRmxyVmpSWFZsWjFVVzFzVjAxV1duVldNakF4VmpKU1YyRXpjRlppYTBwd1ZGZHdWMDVzVWtoaVJVNVlVbTVDVlZWWE1EVlhiR1JIWTBoT1ZGWlhVbkphUnpGTFpFWmFWbVJGY0ZKTlJWcDFWVEZXYjAweGIzaGlSbWhvVWpOb1lWWnFSa2RpYkdSWFdYcEdhRTFIZUVwV1J6RTBZVEZGZDFOWVpGcFdWMUo2V2xkMGMxTldWblZYYTNCVFRVWmFkVmRZY0V0V01sSllWRmhzYVZJeWVIQlZha1pYWW14a2NscEdaR2xXYlhoYVZtMDFUMkV4UlhkVGJsSmFZV3MxUzFkcVNsZFhSVGxWVW10d1UyVnRkRFJYYTFaUFVUSlNjMk5JUWxKaGEwcHZWV3BHVjJKc1pGaE5SRlpQVWxob2RWbHFTbXRUYkVWM1VtMDFZV0V3V2pKWGFrSnpVa1pHV0ZwRmVHaFdSMmhOVlZSS2MxRnNiM2RpUlZKU1ZucFdjbFZxU2pSTlJtUnpZVWhrYTJKVmNEQldiR014VTJ4S1JWRllTbFJXVlRWeVZXMHhVMWRXVG5WWGJYQlRUVlpaZVZac1VrOVZNbEp6WVROc2ExSjZiSEJVVnpWdlRVWk9kV0pFVGxSTlJUVjNWVlprYTFOc1JYZFNha3BVVFcxU01sZHFRbk5TUmtaWVdrY3hVbVZyU1hkV1JWcE9aREpTUm1WR1VrNVRSa3BPVmxod1EwMUdVa2RVV0dSclVsaG9WVlJWYUZOVVZsWTJVV3BDVlZKck1UTmFSVlkwVmtVeFNWVnJNVlpsYTBsM1ZrVmFUbVF5VWtabFJsSk9VMFpLVGxaWWNFTk5SbEpIVkZoa2ExSllhRlZVVldoVFZGWldObEZxUWxWU2F6RXpXa1ZXTkZaRk1VbFZhekZXWld0SmQxWkZXazVrTWxKR1pVWlNUbE5HU2s1V1dIQkRUVVpTUjFSWVpHdFNXR2hWVkZWb1UxUldWalpSYWtKU1RXMTRRMWRxUW5OU1JrWnhZVVZ3VTFaV2IzcFhWRUpyVGtkT1IyRXpiRk5oYTBwdlZtNXdjMDFXVGxaV2FsSnJZa2QwTlZWdE5VOVpWbFYzVTJ0V1dtRnJhM2haYkdSSFYwWndSVkp0Y0dsV1Ztd3pWMVphYWs1WFVsWlVia0pTVmpKU1MxVlVRa3BPUmxKSFZGaGthMUpZYUZWVVZXaFRWRlpXTmxGcVFsVlNhekV6V2tWV05GWkZNVWxWYXpGV1pXdEpkMVpGV2s1a01sSkdaVVpTVGxOR1NrNVdXSEJEVFVaU1IxUllaR3RTV0doVlZGVm9VMVJXVmpaUmFrSlZVbXN4TTFwRlZqUldSVEZKVldzeFZtVnJTWGRXUlZwT1pESlNSbVZHVWs1VFJrcE9WbGh3UTAxR1VrZFVXR1JyVWxob1ZWUlZhRk5VVmxZMlVXcENWVkpyTVROYVJWWTBWa1V4U1ZWck1WWmxhMGwzVmtWYVRtUXhUWGRpUlZKU1ZqSlNTMVV3YUd0VVJrNVdWR3RLWVUxSGVFcGFSRXByVmpGSmVXRklUbFJXVjFKSVdrUktUMU5IVmtsUmJIQk9ZVEZzTTFkV1dtcE9WMUpXWWtWb2JGTkdjR0ZVVjNSaFpXeGtjMVJyVG1oTldFSmFWbGN4TkdGdFNsVlNibVJhWWxSR1dGcFhkSE5UVmxaMFQxZEdWazFGY0hsV01uaHJXVmRHU0ZWc2FHeFNSVXBMVldwT2IwMXNaRlZUYTJScVRWaENWVlZYY0VOaFJrbDNWMWhrVkZaWGFISlpNR1JMVTBkUmVWcEdjR2xXYkZwMVYydGFiMVF5U2tkalJVcHBUVzFTUzFWVVFrZGliSEJ5Vkd0T2FGWXhXbFZWVjNCRFlVWkplRlp0TldGU1YyaE1XVlZrUzJSV1VuVlViSEJZVW10d00xZFhjRXBOUm05NVZGaHNWMkp0ZUhKWmJHUTBZMVprYzFSclRtdE5helV3VkRGU1MyRkdXWGhUYms1YVRXMXpkMWRxUm10WFJUbFZVbXR3VTAxR2J6RldNbmhQVVRKS1dGUnVVbGRpV0doTFZUQmFTMDFzVGxaaFJUbHBVakZLUlZWWGNFTmhSa2w1WlVSYVZGWlhhR2haVldSTFUxWmFkR1ZGVW1oV1ZWcDFWVEZXVDFFd09VWmlSV3hXWW14d1MxVnFRbUZOVm5CWFZHdE9hMkpJUW5kVlYzQkRZVVpKZUZadE5WcGhNazB4V1ZkNGMxZEhWa2hsUjNCc1ZsVnNObGRXVm10ak1rWjBVbXRTVW1Gck5XOVdhazV2Wld4T1ZscEZkR2xTVjNoS1ZrZHdSMkZzVGtaVGFrcGFUV3BXVkZsclduZFNSa1owWWtkNFZrMUZiRE5YVmxaclZteHZlR0pHYkZKaWJWSndWV3BLTkdOV1pGZGhSazVxVWpCc05WUnJhRmRTUjBaV1VtMDFWRlpWTlVSVU1GWlBZMFpHV0ZwRmNGSk5SVm8wVmtWb2EyUnNUWGRpUlZKU1ZqSlNTMVZVU2xObGJHeHhVMnM1YUZJd2NFbFdiR014VTJ4S1JWRllTbFJXVlRWeVdXdGtTMk5HYTNwVWExSmhUV3BzZFZVeFZrOVJiRzkzWlVSV2FVMUlVa3RWVkVKSFlteE9WbUZFVG10U1dHaFZWRlZvVTFSV1ZqWlJha0pWVW1zeE0xcEZWalJXUlRGSlZXc3hWbVZyU1hkV1JWcE9aREpTUm1WR1VrNVRSa3BPVmxod1EwMUdVa2RVV0dSclVsaG9WVlJWYUZOVVZsWTJVV3BDVlZKck1UTmFSVlkwVmtVeFNWVnJNVlpsYTBsM1ZrVmFUbVF5VWtabFJsSk9VMFpLVGxaWWNFTk5SbEpIVkZoa2ExSllhRlZVVldoVFZGWldObEZxUWxWU2F6RXpXa1ZXTkZaRk1VbFZhekZXWld0SmQxWkZXazVrTWxKR1pVWkthVTF0VWt0VlZFSkhZbXh3Y2xSclRsSmlWVFZLVlZjMVQyRkdXWGRPVnpsaFVsZFNlbHBITVV0alJrWnlXa1p3VjAweWFEWldNV040VWpKR2RGSnFWbEpoZWtad1ZGZHpNV0l4YkhKYVJscFVUVWQ0UlZWV1pHdFRiRTVKV2tSQ1ZWSnJNVE5hUlZZMFZrVXhTVlZyTVZabGEwbDNWa1ZhVG1ReVVrWmxSbEpPVTBaS1RsWlljRU5OUmxKSFZGaGthMUpZYUZWVVZXaFRWRlpXTmxGcVFsVlNhekV6V2tWV05GWkZNVWxWYXpGV1pXdEpkMVpGV2s1a01sSkdaVVpTVGxOR1NrNVdXSEJEVFVaU1IxUllaR3RTV0doVlZGVm9VMVJXVmpaUmFrSlZVbXN4TTFwRlZqUldSVEZKVldzeFZtVnJTWGRXUlZwT1pESlNSbVZHVWs1VFJrcE9WbGh3UTAxR1VrZFNibHBoVFVkNFJWVldaR3RpVmtaWVQxYzFWRlpWTlVOWGFrcGhVa1pHYzFadGFGTk5WbHAxVmpJd2VGSXlUWGxUYTJoVVlsZG9ZVlJYTlU5aWJHeHlXWHBXYUdKSGVGbGFWV1EwVTJ4SmVGTnVUbUZTVjFKWVdsWmtTMWRIU2tsV2JVWllVbFJHZFZkclZtdGlNa3BHWWtWb2JGTkdjR0ZVVjNSaFpXeGtjMVJyVGs1U01HOHhWVmR3UjJGck1YTldiVFZoVWtWd2RsbHJaRXRqUmtaeFVXMW9VMDFXV25WV01WSlBWakpXV0ZSdVVsZGliRnB5VlZSQ1MwMXNiSFJOVmxwVVRVZDRSVlZXWkd0VGJFNUpXa2MxV2xadGFFOVhha3BMWkVVNVZWRnJjRk5OUm13MVZqRmFhMk15VFhoaVJtaFVZbXMxYUZaWWNGTmliRmw0V1hwV1RsWlhlRWxVVm1SdllrWlZkMU51UmxwV1YxSklXa1phZG1WV1dsaGFSM1JUVFcxb2VsVXhWbTlaVjBaSVUydHNWMkpZYUV0Vk1GcExUV3hPVmxwRk9XdGlWVFV4VlRJeE5HRnJNSGRUYWtwYVlsUkdVMWRxU2xOVFJUbElXa1p3VjJWc1ZYaFZNVlpxVGxkS1ZsUnVRbEpXTWxKTFZWUkNTazVHVGxaaFJrNXBUVmhDVlZWWE5VOVhiRm8yVm01V1lWSnRVa2haYlhoM1ZrWkdkRTFYYkU1aWJXaDVWako0YjFNeVZuSmlSV3hXWWxSc1lWWXdXa2RpYkdSWFlVVjBhVkpYZUVwVlZ6VnpZVlV3ZUdOSVpGaGhNbEpZV1ZSQ2MxTldWblJQVjNCcFZrZDBORll5Y0V0aWJHOTVWbXhvVUZaRlduRlpWbFpMWWpGcmQyRkZUbXBOYTFwWlZrY3hiMkV4U1hsbFJFcGFZbGR6ZDFWNlFuTlNSa1pZV2tWd1ZGTkhVazFWTVZaUFVXeHZkMkpGVW1sTk1YQkZWMnBKTldKc1RsWlVhMHBoVFVjNU5WWXlNVzloVmtsNllVaENXRlp0VWxCWk1uaHVaVmRXU1Zkc2NFNWhNWEEyVmpKNFQyRnNiM2hSYkZaUFVqSlNURlJYZUdGTlZrNTFZa1JPVkUxRk5YZFZWbVJyVTJ4RmQxSnFTbFJOYlZJeVYycENjMUpHUmxoYVJ6RlNaV3RKZDFaRldrNWtNbEpHWlVaU1RsTkdTazVXV0hCRFRVWlNSMVJZWkd0U1dHaFZWRlZvVTFSV1ZqWlJha0pWVW1zeE0xcEZWalJXUlRGSlZXc3hWbVZyU1hkV1JWcE9aREpTUm1WR1VrNVRSa3BPVmxod1EwMUdVa2RVV0dSclVsaG9WVlJWYUZOVVZsWTJVV3BDVlZKck1UTmFSVlkwVmtVeFNWVnJNVlpsYTBsM1ZrVmFUbVF5VWtabFJsSk9VMFpLVGxaWWNFTk5SbEpIVkZoa2ExSllhRlZVVldoVFZGWldObEZxUWxKTmJYaERWMnBDYzFKR1JuRmhSWEJUVm14dmVGWXhVazlUTURWWVZHdHNWbUpyU25CVVYzQlRZbXhXTmxOc1pFOVdWVFYzVlZaa2ExTnNSWGRUVkZKVlVtc3hNMXBGVmpSV1JURkpWV3N4Vm1WclNYZFdSVnBPWkRKU1JtVkdVazVUUmtwT1ZsaHdRMDFHVWtkVVdHUnJVbGhvVlZSVmFGTlVWbFkyVVdwQ1ZWSnJNVE5hUlZZMFZrVXhTVlZyTVZabGEwbDNWa1ZhVG1ReVVrWmxSbEpPVTBaS1RsWlljRU5OUmxKSFZGaGthMUpZYUZWVVZXaFRWRlpXTmxGcVFsVlNhekV6V2tWV05GWkZNVWxWYXpGV1pXdEpkMVpGV2s1a01sSkdaVVpTVGxOR1NrNVdXSEJEVFVaU1IxUllaRlJOUjNoRlZWWmthMU5zVGtsYVJYaFVWbFUxUTFkcVFuTlRWMUY1V2taa1UwMXRhRE5YVkU1elVUSk9jMk5HYkdoTmJWSnZWakJWZUdKc2NFZGhSVGxwVW01Q1JWVlhNWE5pUmxWM1UxaGtXbFpYVWxkWGFrWlBWMGRXU1ZSdGRGZGxhMW96VjFjd2VGSXdNVWRqUmxKU1lsaG9jRmxzVlRGT1ZuQlhZVVZPVGxKdVFscFZNV1JyWVdzeGMxZHFWbUZTZWtaNldWZDRkMVpHUm5SaFIyeHBWbXRhZFZkWWNFdGlNbEowVld4b2JGSXpVa3RWYWtKM1l6Rk9WbUZGT1dsU01VcERXV3BLYTFOc1JYZFNiVFZoWVRBMVJGUlZaRXRPVmtaMFlVVndWRkpZUW5aWFZ6QjRWVEpTZEZOc1VtdE5iVkpQV2xkMGMySnNaRlZUYlRsb1VqQTFNRlZ0TVhkaE1VbDRWMnBXVkZaWGFGQlVWV1JQWkVkS1NWWnRSbXhYUjFKMVYxZHdUMVV5U1hoalJteFVZV3MxYjFZd1ZURmpNVTVXWVVaT2FVMVlRbHBXUnpFMFUyeEplRmRxUmxoV1JUVk1WR3hrVDFOV1ZuUmxSMFpTVFVWdk1sZHJWbTlUTWs1SVUyNVNZVk5JUWtWWlZsWkhZbXhPVmxSclRsQlNWM2hLVjJ0b1EyRldTWHBhUnpWYVlsUkJNVlJWVm5OVFJrNTBaVVZ3VkZKVVZuWldNakI0Vm0xU1ZtSkZaRkppYXpWb1ZtcENZVTVzWkhOVWEwNW9UV3R2TVZWWGNFTmhSa2w1WlVSYVZGWlhVa3haYTFwM1pFVTVXV0pIUmxaTlJYQjVWako0YjFFeVRYbFRXSEJwVTBWS2NGbHNaRTlpYkdSWFdYcENZVTFYZUZwVlZ6VnJZVlpKZVdWSVJsaFdiV2hVV1RCa1NtVlZOVWhoUlZKb1ZsVmFkVlV4Vms5Uk1EbEdWRzVDVWxZeVVrdFZWRUpIWlVaU1NWcElXbFJOUjNoRlZWWmthMU5zUlhsVmJteFlZa2RvZVZsdGRITlNWVEZFWkVWd1UwMVdiM2hYYTJSelltMUtjMUpzWkZKaVJWcGFWRlZvVTFJeFdYaFViWEJxVWxob1ExbHFRakJUYkVWM1VtMDFWRlpWTlhKWlZ6RkhWMVpHZEU5WFJsaFNWM2d4VlRGV1VtUXdjM2RpUlZKaFVsVndWRlp0YzNoTlJsSllZMFphVG1FemFGZFdSM1JQVlcxV1dGUnVjRkpOYlZJeVYycENjMUpHUmxoYVJURnNWbnBzVFZVeFZrOVJiRzkzWWtWc2EwMHhTazVXV0hCRFRVWlNSMVJZWkd0U1dHaFZWRlZvVTFSV1ZqWlJha0pWVW1zeE0xcEZWalJXUlRGSlZXc3hWbVZyU1hkV1JWcE9aREpTUm1WR1VrNVRSa3BPVmxod1EwMUdVa2RVV0dSclVsaG9WVlJWYUZOVVZsWTJVV3BDVlZKck1UTmFSVlkwVmtVeFNWVnJNVlpsYTBsM1ZrVmFUbVF5VWtabFJsSk9VMFpLVGxaWWNFTk5SbEpIVkZoa2ExSllhRlZVVldoVFZGWldObEZxUWxWU2F6RXpXa1ZXTkZaRk1VbFZhekZXVm5wc2RWVXhWazlSYkc5NVYydFNVbUV3Y0hKV01GcExUV3hzY2xsNlZtaFNia0pKVm0weE1GTnNTbkpPV0U1YVRXcFdhRmt3V25KbFZscFlXa1phVkZKWVFYbFhhMk40WXpKRmVHTkdiRlJpYmtKRldWWldSMkpzVGxaVWEwNVFVbGhvVlZSVmFGTlVWbFkyVVdwQ1ZWSnJNVE5hUlZZMFZrVXhTVlZyTVZabGEwbDNWa1ZhVG1ReVVrWmxSbEpPVTBaS1RsWlljRU5OUmxKSFZGaGthMUpZYUZWVVZXaFRWRlpXTmxGcVFsVlNhekV6V2tWV05GWkZNVWxWYXpGV1pXdEpkMVpGV2s1a01sSkdaVVpTVGxOR1NrNVdXSEJEVFVaU1IxUllaR3RTV0doVlZGVm9VMVJXVmpaUmFrSlZVbXN4TTFwRlZqUldSVEZKVldzeFZtVnJTWGRXUlZwT1pESlNSbVZHVWs1U1dGSkxWVlJDUjJKc1RsWmhSRTVVVFVkNFJWVldaR3RUYkU1SldrYzFWMkV5VW5aWmExWnpVMVpTZEdWSGNHbGlTRUl6VmpGU1MxWnNiM2xVYTJ4VVlteHdjbGxzWkRSamJHUnpZVVYwYkdFeWVFbGFWV2hEWVdzd2VGTnVUbGhoTURWRVdXcEdkMWRXVG5SbFJYQlVVakZLTTFkWGRHdE5NVzk0WWtoU1YxWXlVbUZXTUZwYVpERnNjVk5ZYUdoU01VcEpXV3RrZDFkc1dYcGhTSEJoVm1zMVJGbDZTa3BsVmtwMFpFZEdWMDFWV25WWFYzQktUVVp2ZVZWcmFHaFNNMmhGV1ZaV1IySnNUbFpVYTA1UVVsZDRTbFV5TVRSaGJHUkhWMjVPV21Wck5WTlhha3BUVTBVNVNGcEhlRmRsYlhRMFYxUktjMUV5UmtoVWEyeFNZbXMxYjFacVFURmlNWEJHV2toT2EySlZjSGRVYTJSclZUSktWMWR1VGxwaE1EVkVXV3hrVDJSR1duUmxSWEJVVW10dmVWVXhWbXRTTWtWNFkwVlNVbUZzV25CVVZFWmhUbFpPVmxsNlZrNU5hM0IzVlZjMWQxbFdaRVppTTJ4YVZtMVNVRmxyWkU5T1ZrWnhVVzFzYTAxcWJIVlZNVlpQVVd4dmVWZHJVbEpoYTBwdlZXcEtORTVzVGxaYVJXUnNWakExTUZWdGNGZFRiRTVIVTJwS1ZGWlhVbkphVmxwelYwVTFWVkZyY0ZOTlZtdDNWMVJDYTFJeVVsZGpSV2hYWWxoU1MxVnFSblpsUm14MFRWVTVUbEl3V2xsVU1XaFhWMnhaZW1GSVpHRlNWMmg1VjJwS1UxTkZPVWhhUjNoWFpXMTBORmRVU25OUk1rWklWR3RzVW1Kck5XOVdha0V4WWpGd1JscElUbXRpVlhBeFZrWm9WMUpIUmxaU2JUVlVWbFUxUkZRd1ZrOWpSa1pZV2tWd1VrMUZXalJXUldoclpHeE5kMkpGVWxKV01sSkxWVlJLVTAweGEzbE5SRlpPWWxWYVdWWlhNVFJoYlVweVRWaFdWRlpXUmpOVGVrSnpVakpOZDJSRlVtaFdWVnAxVlRGV1QxRnNiM2RpUlZKU1ZqSlNUbHBXWXpWVVJrNVdWR3RLWVUxSGVFVlZWbVJyVTJ4RmQxSnROVlJOYlhoRVZrWmFjMWRXVG5SaFIzUnBWbXh3TmxVeFZsZFpWMVpYWWtab1RsWXphSEpVVjNCelRsWnNXV0pGVGxkU2JrSmFWVEp3UzJGR1dYZE9XRTVVVmxad1JGcFdaRXBsYkdSMVVXMUdVMDFXYnpGWFZFNXlUVWRTVm1WSE5XbE5iVkpMVlZSQ1IySnNUbFpVYTBwaFRVZDRSVlZXYUVkVVYxRjVUMWMxVkZaVk5VTlhha0p6VWtaR1dGcEZjRk5XTTJnMlYxZDBiMVl5VWtoU2JHaFBWakpvY2xWcVJtRmhiRlpYWVVaa1RsSXdXa2hhVlZaTFlURmtSMU51V2xkV1JYQllXbFprVTJSSFNraGpSMFpYWVRCdk1WZFhjRTlaVjA1SFkwVm9WMkp0ZUZGWlZ6VkRZMVpzY2xwRlpHeGlWVFF4V2tSQ01GTnNSWGRTYlRWVVZsVTFRMWRxUW5OU1JrWnlZMGRzVTAweVpEUlhWM2hyWXpKU1YySkdiRlppV0doYVZXeFdkMDVXYkhGVGEyUm9UVmQwTlZWdE5YZGhNVWw1WlVSR1dHRnJXVEJWVkVwUFpFVTVXR0ZIUmxOTlJGWjJWMWh3VDFVeFdrZGpSbXhVWVd0d2IxWnFRVEZqTVZwV1lVVjBhMkpXU2pCWmEyUXdXVlprUm1GNlNsVk5ha1pRV1hwR2MxZFdVblZqUlRGU1ZucHNkVlV4Vms5UmJHOTNZa1ZTVWxZeVVrdFZiR1EwWld4c2NtRkdaR3RTTUZwWlZHeGtiMkV4U1hoWGJYQldWbnBXV0ZwWGVHOVNiRTV4VW0xd1RsWlVWbnBYVkVreFdWZE9SMkV6YkZkaVJWcHhXV3hTY21WV2JGZGFSazVwVWpBMWVGbHVjR0ZYYXpGMVlVYzVXbVZyTlU5WmVrSlBZMFpHV0ZwRmNGSk5SVnAxVlRGV1QxRnNiM2hVYkdoc1UwVTFjbFp1Y0Vka01XeDBUVlZrVGxKdVFsaGFWVlpUVjJ4WmQwNVlXbGhpUm04d1ZXdGFjMWRHVW5SUFYwWlhZWHBXZWxkVVNURlpWMDVIWVROc1YySkZXbkZaYkZKeVpWWnNWMXBHVG1sU01EVjRXVzV3WVZkck1YVmhSemxhWldzMVQxbDZRazlqUmtaWVdrVndVazFGV25WVk1WWlBVV3h2ZUZSc2FHeFRSVFZ5Vm01d1IyUXhiSFJOVldST1VtNUNXRnBWVm10aFZUQjRWMnBHV0dFeVVraFVWV1JIVjBVNVdWWnNiRk5oTUc4eFYxZHdUMWxYVGtkalJXaFhZbTE0Y1ZSV2FHOVNWbXh4VTFSR2JHSlZiRFZhVldRMFZtc3dlRmRxVGxwTlIwMHhXbFprVTFJeFVuUmxSM0JwWWtoQ00xWXhVa3RXTVZaWVZHNVNVRlpGY0c5V2FrWkxZekZyZVdOSVdrOWlSM1ExV2xWa2IyRnJNSGROV0hCU1RXMTRRMWRxUW5OU1JrWllXa1Z3VWsxRlduVldWRVpyVGtkTmVWVnNhRTVYUlVwd1dXeFdXbVF4WkhOWGFsSlRVakJzTlZReGFFdGhSbGw0VjIxd1ZsWkZhekZhUnpGR1pWZEtTR1ZHV2s1aVJtOHhWMnRqZUdNeVJuTmpSbVJTWW0xNGNGUlVSbmRrTVdSeVdrWmtiRlpVYkhoWk1HUjNZVlpKZDFkcVdscE5NbmQ2VlhwQ2MxSkdSbGhhUlhCU1RVVmFkVlV4Vms5Uk1VNTBVMnRvYkZKRlduQldha28wVFZaa1YyRkdUbWxTYldoSFZsY3hiMkV4U1hkWGJrSllWbTFvVUZscldtOVNiRlowWVVkMFUwMUdjSGRXTVZwdlZESktSMVpZYkZkaWJYaHlXV3hrTkdOV1pITlhhMDVzVmpCc05sWXlOVU5aVmtsNFYycFdWVTF1UWpOWlZ6RkxVMFpLZFdOSGNHeFhSMUpOVlRGV1QxRnNiM2RpUlZKU1ZqSlNTMVZVUWt0VE1XeHlXa1JTVGxZd2NGbFphMmhYVjJ4a1IxTnVUbGhTVmxwWVdrWmFjbVZzVG5GV2JYQlVVbXR3TTFkWGNFcE5WbXQ0VTJ4b1QxWXpRbkZaYlRFMFRURndSbHBJVG10aVZYQjZWa2N4TkdGdFNuTmpTR1JZVmtWd1dGWldaRTlrUlRsVlUyMW9WMDFWY0hwWFZFcDNaR3MxYzJFemJHeFNNbWh4VkZSQmVHVnNSWGxpUlVwaFRVZDRSVlZXWkd0VGJFVjNVbTAxVmsxWFVUQlpla3BUVjBVeFdWRnRiR2xXVm13elZqSjRZVTVHU1hsU2JHaHNVak5vY1ZSVVNqUk9iSEJHV2taa2ExSnRhRWRXTWpWRFlWWkplRmRxV21GV2JXaFFWRlZhZDFkRk1WZFZiVVpZVWxjNU5WZFdXbXRVTWtwSFZtdHNWR0pzY0hKWmJHUTBZMnhrYzJGRmNFOWhlbXd3VmtjMVQxZHNaRVpPVkZwVlVsVmFNbGRxUW5OU1JrWllXa1Z3VWsxRlduVlZNVlpYWXpKTmVWTnJiRmRpYkVwdlZtNXdWMkl4Y0VaYVJtUmFUVlZ3TUZReFVrZGhWMHBYVTIwNVlWSlhVbnBhUnpGTFl6SldSMUp0Y0dsV1IzUTFWMVphYTFVeVNraFVibFpWWWxVMVZGbHNVbkpsUm14MFRWWk9hRkl4U2tsWmEyaGhZVmRLUms1WVRscE5hbFpvV1RCYWNtVldXbk5TYlhCcFZrZDBOVmRXV210Vk1rcElWRzVHYVdWc2NHRlVWelZ2WWpGc05sUnJOV3BOUlRWM1ZWWmthMU5zUlhkU2JUVlVWbFUxUTFkcVJrOVhSMVpKVkcxMFYyVnJXak5YVnpCNFVqQXhSMk5HWkd4U1YzaGhWakJWTVdSc2JGZFpla1pwWWtkb1IxbFZaRzloYXpGMFlVWldXR0pIYUV4VVZ6RkhWMFpTZEdWR1dsUlNXRUY1VjJ0amVHTXlSWGhqUm14VVZrWndVVmxzVlRGbGJHUlhZVVU1YkdFemFFTlpha3ByVTJ4RmQxSnROVlJXVlRWRFYycENjMUp0U2tsVWJXeFVVbXh2ZDFkV1dtcE5WMFpJVld0b1YySlZOVlpXYWtKaFpERnNjbGRxVWxWaVIzaFpXV3RvVDFack1YTlhhbFpoVW5wR2VsbFhlSGRXTVVaMVlrZHNUazFZUWpOV01uUnJWakpXVms5WVJtcFNNMEp3VldwQ1lVNXNhM3BpUkU1VVRVZDRSVlZXWkd0VGJFVjNVbTAxVkZaVk5VUlZNakZMVTBkV1JWSnRiRmROYm1kNFZqRmFiMVV5U2tkaFJWcFBWMFp3Y2xWcVNqUmtSbXhYV2tVNWFGSXhTa2xaYTJoaFlWZEtjazVYY0ZkU2VrRXhWRlZrUjFkR1pIVlJiSEJPWVRGc00xZFdXbXBPVjFKWFZsaHNWMkp0ZUhKWmJHUTBZMVprYzFkclRteFdNR3cyVmpJMVExbFdTWGhYYWxaVlRXNUNNMWxYTVV0VFJrcDFZMGR3YkZkSFVrMVZNVlpQVVd4dmQySkZVbEpXTWxKTFZWUkNTMU14YkhKYVJGSk9WakJ3V1ZscmFGZFhiR1JIVTI1T1dGSldjRVJaVlZwMlpWZEtTVlpzY0ZoU2EzQXpWMWR3U2sxV2EzaFdhMmhUWWxSV2IxWnVjRmRpTVhCR1draE9hMkpWY0hwV1J6RTBZVzFLYzJOSVpGaFdSWEJZVmxaa1QyUkZPVlZUYldoWFRWVndlbGRVU25ka2F6VnpZVE5zYkZJeWFIRlVWRUY0Wld4RmVXSkZTbUZOUjNoRlZWWmthMU5zUlhkU2JUVldUVmRSTUZsNlNsTlhSVEZaVVcxc2FWWldiRE5XTW5oaFRrWldXRkpzYkZKaVdHaHdWV3BLTkUxV1pITlhhbEpXVmpCYVdsVlhNVFJoVmtsNVpVUkdXR0pHY0ZCWmEyUlBaRlprZFZGc2NFNWlSbkJUVjFSSmQwNVZNWFJTYkdoV1lsaG9jVmxYTURSTmJHUlZVMnBTYUZJd01UWldSbWhQVWtkR1ZsSnROVlJXVlRWRFYycENjMUpHUmxoYVJsSlhUVEpvTmxkcldtcGxSMDVJVTI1U1UyRnJTbWhXYlRWdlZURndSMXBHWkU1V2JrSllXbFZhUzJFeFdYaFhXR2hZWWtad1VGbHJaRTlrVm1SMVVXeHdUbUpHY0ZOWFZFbDNUbFV4ZEZKc2FGWmlXR2h4V1Zjd05FMXNaRlZUYWxKb1VqQXhObFpHYUU5U1IwWldVbTAxVkZaVk5VTlhha0p6VWtaR1dGcEdVbGROTW1nMlYydGFhbVZIVGtoVGJsSlRZV3RLYUZadE5XOVdSbVJ6V2taT2FsSXdNVFJhVlZwUFdWWlplRk51WkZwbGExcFFXV3RrVDJSV1pIVlJiSEJPWWtad1UxZFVTWGRPVlRGMFVteG9WbUpZYUhGWlZ6QTBUV3hrVlZOcVVtaFNNREUyVmtab1QxSkhSbFpTYlRWVVZsVTFRMWRxUW5OU1JrWllXa1pTVjAweWFEWlhhMXBxWlVkT1NGTnVVbE5oYTBwb1ZtMDFiMUV4Y0VkaFJrNXBUVmRvU0ZWWE1XOWhhekIzVGtod1dtRnJOVXhaVkVwT1pVZFdSMUpzY0ZoU1ZGVXlWMnRTU2s1WFZsZGpSV1JVWWxob2NWUlhlRnBrTVZwVlUyeGtiRll4U2pCWmEyUjNXVlphY2xOcVZscGhhelZvV1RCYWQxTkdXblZpUmtKb1ltdEtlRmRYZEd0U01sWjBWR3BXYTAxSVVrdFZWRUpIWW14T1ZsUnJTbUZOUjNoRlZWZDBkMkZXU1hwYU0yaGFZa2RTZWxwR1duTlhWbFowWlVac1UyRjZWbnBYV0hCUFZESk9TRk5ZYkU5V01EVlhWRmQ0WVU1c2JEWlRiazVyWWxWd2VsWkhNVFJoYlVwelkwaGtXRlpGY0ZoV1ZtUlBaRVU1VlZOdGFGZE5WWEI2VjFSS2QyUnJOWE5oTTJ4c1VqSm9jVlJVUVhobGJFVjVZa1ZLWVUxSGVFVlZWbVJyVTJ4RmQxSnROVlpOVjFFd1dYcEtVMWRGTVZsUmJXeHBWbFpzTTFZeWVHRk9SbHBZVkc1U1UySnNXbkZVVnpWdllqRndSbHBJVG10aVZYQjZXbFZhVjJGdFNsWlhha1phWld0dk1GbFZaRk5UUjBwSlYyMXNhVkpVVm5wWFZFa3hXVmRPUjJFemJGZGlSVnB4V1d4U2NtVldiRmRhUms1cFVqQTFlRmx1Y0dGWGF6RjFZVWM1V21Wck5VOVpla0pQWTBaR1dGcEZjRkpOUlZwMVZURldUMUZzYjNoVWJHaHNVMFUxY2xadWNFZGtNV3gwVFZWa1RsSnVRbGhhVlZwclYyeFplbUZJWkZoaE1sSklWRlZrUjFkRk9WbFdiR3hUWWtoQ2RsZFhkR3RqTWtWNFlrWnNWbUpyU25CVVYzQlhWbFprYzJGRmRFNWlWVnBaVmtjeE5GWnNUa1pqUkVwaFVucEdlbGxVUm5kWFZrNVZWMnhDYVZaVVZqWldNVnB2VkRKV2NtVkZTbWxOYlZKTFZWUkNSMkpzVGxaVWEwcGhUVWQ0UjFscmFFOWhWazVIVjJwQ1dsWnRUWGhaVldSVFUwWmFkRlJzWkdsV00yaDZWMnRTUjA1R1dYbFNiR2hYWVdzMVYxUlhlR0ZPVm5CSVRWaE9hR0pJUWxoVlZ6VnpZVlV3ZUdOSVpGaGhNbEpZV2xaVk5XTlhUa2hqUjJ4VFRVWnZNbGRVVG5OTk1VMTNWRzVDVWxZeVVrdFZWRUpIWW14T1ZsUnJTbUZOU0djeFdXcENNRk5zUlhkU2JUVlVWbFUxUTFkcVFuTlNSa1pZV2tWNGFGWlZjRk5XTVZwclZESk9jMkpHYUdGU00yaExWVzF6TVdNeGEzbE9WMFpxVW0xME5WWnNaR3RXYkU1R1kwUktZVko2Um5wWlZFWjNWMVpPZFdORk1XaFdSa2w0VlZSS2MxRnNiM2RpUlZKU1ZqSlNTMVZVUWtkaWJFNVdWRzVhYTJFd05YVlpha3ByVTJ4RmQxSnROVlJXVlRWRFYycENjMUpGT1VsU2ExSm9WbFZhZFZVeFZrOVJiRzkzWWtWU1VsWXlVa3RWVkVrMVlteFdWMkZGVG10TmEzQkpXV3RrZDFkc1pFZFRibVJhWVd0cmQxZHFSbFpsVmxwMVlrZDBhVll6YUhoV01uaFBVVEZXV0ZSdVVsQldSWEJ2Vm1wR1MyTXhhM2xPVlRWclZsaG9kMVJyVmpCVGJFVjNVbTAxVkZaVk5VTlhha0p6VWtaR1dGcEZlR2hXUjJoTlZURldUMUZzYjNkaVJWSlNWakpTUzFWVVFrdFJNV3QzWVVWT1drMVdXa3BWTWpWaFlUSktXR1ZJU2xoaVIyaE1XbGQ0YjFKc1NuVmFSM0JUWVhwV2VsZFVTVEZaVjA1SFlUTnNWMkpGV25GWmJGSnlaVlpzVjFwR1RtbFNNRFY0V1c1d1lWZHJNWFZoUnpsYVpXczFUMWw2UWs5alJrWllXa1Z3VWsxRlduVlZNVlpQVVd4dmVGSnNiRkppYlZKYVZXMTBTMDVXYkhGVWJVWnFVbTVDU1ZadE5YTmhhekZaWVVWT1lWSnRhRlJaYWtaV1pWWmFkV0pIZEdsV00yaDRWako0WVZFeVZsaFRXSEJZWW10S2FGVnFSbUZPVmxGNVkwaGthR0pWY0VsVmJUVjNZVzFXV1ZwRmVGUldWVFZEVjJwQ2MxSkdSbGhhUlhCU1RVVlplVlpGYUhOUk1VWjBWR3RzVW1KVk5WZFZNRlozVFd4d1NFMVlUbWhOV0VKYVZUSTFkMWRXU2xaalJGWmFZV3R3U0ZsVVJuSmxWa3AxWTBkMFUyRjZWbnBYVkVreFdWZE9SMkV6YkZkaVJWcHhXV3hTY21WV2JGZGFSazVwVWpBMWVGbHVjR0ZYYXpGMVlVYzVXbVZyTlU5WmVrSlBZMFpHV0ZwRmNGSk5SVnAxVlRGV1QxRnNiM2hTYkd4U1ltMVNXbFZ0ZEV0T1ZteHhWRzFHYWxKdVFrbFdiVFZ6WVdzeFdXRkZaR0ZTZWtaWVdrWmtVMUl4VW5SbFIzQnBZa2hDTTFZeFVrdFdNVlpZVkc1U1VGWkZjRzlXYWtaTFl6RnJlV05JV2s5aVIzUTFXbFZrYjJGck1IZE5XSEJTVFcxNFExZHFRbk5TUmtaWVdrVndVazFGV25WV1ZscHZVVEpSZUdGRlpGSmliWGh3VkZSR2QyUXhaSEphUm1Sc1ZqQXhORnBWV2s5aFZUQjRWMWhrV0dKR2NGQlphMlJQWkZaa2RWRnNjRTVpUm5CVFYxUkpkMDVWTVhSU2JHaFdZbGhvY1ZsWE1EUk5iR1JWVTJwU2FGSXdNVFpXUm1oUFVrWnZlVTlYTlZSV1ZUVkRWMnBHYjFaSFVYZGtSVkpvVmxWYWRWVXhWazlSYlZKeVpFYzFhVTF0VWt0VlZFSkhZbXh3Y2xSWVpHdFNXR2hWVkZWb1UxUldWalpSYWtKVlVtc3hNMXBGVmpSV1JURkpWV3N4Vm1WclNYZFdSVnBPWkRKU1JtVkdVazVUUmtwT1ZsaHdRMDFHVWtkVVdHUnJVbGhvVlZSVmFGTlVWbFkyVVdwQ1ZWSnJNVE5hUlZZMFZrVXhTVlZyTVZabGEwbDNWa1ZhVG1ReVVrWmxSbEpPVTBaS1RsWlljRU5OUmxKSFZGaGthMUpZYUZWVVZXaFRWRlpXTmxGcVFsVlNhekV6V2tWV05GWkZNVWxWYXpGV1pXdEpkMVpGV2s1a01sSkdWRzVDVWxZeVVrdFZWRUpLVGtaT1ZsWnJPV3BOVjNoYVZrYzFkMU5zU2xaWGJuQmFWbTFTU0ZwWGVIZFhWbEpXWkVWd1VrMUZXblZWTVZadlRUSlNSbVZHVWs1VFJrcE9WbGh3UTAxR1VrZFVXR1JyVWxob1ZWUlZhRk5VVmxZMlVXcENWVkpyTVROYVJWWTBWa1V4U1ZWck1WWmxhMGwzVmtWYVRtUXlVa1psUmxKT1UwWktUbFpZY0VOTlJsSkhWRmhrYTFKWWFGVlVWV2hUVkZaV05sRnFRbFZTYXpFeldrVldORlpGTVVsVmF6RldaV3RKZDFaRldrNWtNbEpHWlVaU1RsTkdTazVXV0hCRFRVWlNSMVJZWkd0U1dHaFZWRlZvVTFSV1ZqWlJha0pWVW1zeE0xcEZWalJWYlVsNVdrVndVazFGV25WWGJYUkhaR3h2ZDJKRlVsSldNbEowVlZSQ1MxWnNiRlphU0U1c1lUSjRTVlZ0TlhOaGJVcFdWMVJHVkZaWFRURlpiRlp6VTBaU2RWUnNjRmhTVkZVeVZURldhMUl5VFhsU2JHaFRZbTVDYUZZd1ZYaGliSEJGVTI1T2FrMXJjRVZWVnpGeldWWlZkMU5xVmxoaVIxSnlXVEJrVG1Wc1ZuUmxSM0JwVm14d2VWVXhWbTloTWtsNFkwWm9UMUl5VW5KVmFrcHZaREZyZW1KRlRtaFNNRFZLVlZjMVQyRkdXWGRPVnpsaFVsZFNlbHBITVV0aWJVbDVXa1Z3VWsxRlduVlhiWFJQVVRKT1NGUnFWbEppYmtKeVZXcENZVTVXY0VaYVJtUm9UVWhvZDFWWGRITmhWVEI1Vlc1T1lWSjZSbGhhVmxZMFVrWkdkRTFYUmxkTlZuQTJWVEZXYTFsWFZsZGpSbWhYVmpKU2NsVnVjRzlpYkd0NVRWWmthV0pWV2xwV1IzQkRXVlprUm1KSE5WaFdiV2hQVjJwS1MxZEdTblZXYlhoV1RVVndkbGRVVG5OUk1EVllVMWh3VjFZeVVuSlVWekUwVG14c1ZsUnJUbWhTTURSNldXcEthMU5zUlhkU2JUVmhZVEExUkZSVlpFZFRSbHBZV2tad1YwMHlhRE5XTVZwdlZESktTRlJxVmxKaVYyaHhXV3hhVjJKc1RsaE5WRkpvVWpGYU1WbFVTbk5UYkVsNllVUktXRlp0VWxSWmExcDNVa1pHZFdOSGJHeFdWV3d6VjFaV2ExWXdOVlppUldoV1lteHdjRmxXWkZKa01VNVdXa2M1YWxJd2NEQldWekUwWVcxR1ZsTnFUbGhpUjJoTVdXeGtTbVZzVG5WVmJIQlhaV3hhZUZZeWVFNU5SazEzWWtWU1VsWXlVa3RWTUdoclZFWk9WbFJyU21GTlIzaEZXV3BPWVZKR2IzbFBWelZVVmxVMVExZHFRblpsVmtwMVZHMW9WMDFHYnpKV01uaHZWRzFLY21KRlZrNVJNMUpMVlcwMVQxUkdSWGxpUlVwaFRVZDRSVlZXWkd0VGJFVjNVbTAxVkdGclNraGFSRXBQVWtacmVWcEdSbGRTUmtwMVZsUkdhMDVIVFhsVmJHaE9WMFZLY0Zsc1ZscGtNV1J6VjJwU1YxSXhTbHBWVnpWcllWVXdkMkl6WkZoU1ZscG9XVlZhY21WV1NuUmtSMFpZVWxSV2NWWldXbTlSTWxGM1QxaEdhbEl6UW5CVmFrSmhUbXhyZW1KRVRsUk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsVTFRMWx0ZUVkWFZrNXhVVzFvV0ZKVVZuWlhWekZ6WVd4dmVGRnNWazlTTWxKVlZtcE9iMlZzY0VkWk0yaHFVakJ3TUZWdGNFTlpWbHAxWVVaV1lWSnRhRVJhUkVwS1pXeE9jVkZzYkZOV2JrSjJWakZTUzFJeVJYaGpSbXhWWWxVMVUxWXdWblprTVd4WFlVVTVhRkl3Y0hoWmJuQmhWMnN4ZFdGSE9WcGxhelZQV1hwQ1QyTkdSbGhhUlhCU1RVVmFkVlV4Vms5UmJHOTNZak5rVTJGclduSlZha3ByWkZaT1ZsVllaRXhOUjNoSFdXdG9UMkZXVGtkWGFrSmFWbTFOZUZsVlpGTlRSbHAwVkd4YVRrMVdiM3BYVkVKcVRsZFdXRlZyWkd4U1YxSmhWbXBCTVdJeFpISmFSbVJzWWtkb1IxVnRjRWRoTVVsNVdYcEtWVTFxUmxCWmVrWnpWMVpTZFdORk1WSldlbXgxVlRGV1QxRnNiM2RpUlZKU1ZqSlNTMVZVU2xOU1JteHlXa1ZrYUUxWVFsVlhWRXByVlZaYVJWVnROVlpOVjFFd1dYcEtVMWRGTVZsUmJXeHBWbFpzTTFZeWVHRk9SbHBJVld4c1VtSnRVbkJVVkVKMlpERmtSbFp0Um1oU2JYUTFWVzB4TUZsV1pFWk9WM0JXVm5wRk1GbFZXbmRUUmxwVlYyeENhVlpVVmpaV01WcHZWREpXY21WRlNtbE5iVkpMVlZSQ1IySnNUbFpVYTBwaFRVZDRSVmRyVms5aGJVcFZZa2M1V0dFeVVsQlpWV1JPWld4V1dFNVZjRk5TUlVaNVZURldWMk15VFhsVGEyeFhZbXhLYjFadWNGZGlNWEJHV2taa1drMVdWalpXYlRWcllXeEtObUpFVm1GU1ZtOHdWV3BHYzFkR1VuUmhSMFpUVFZadk1sWXdWbGRUTWxaWVUxaHNVMkpZVW1GVVYzUmhUbXh3UmxWdVdrOWlSM1ExV2xWa2IyRnJNSGROV0hCU1RXMTRRMWRxUW5OU1JrWllXa1Z3VWsxRlduVlZNbkJEVXpBeFdGUnFWbHBOYlZKU1ZtdFNVMkpzVlhoYVJGSnFUV3hLV1ZSV2FFTmhWMHBXVjFoa1dHSkdiekJXYTJSVFYxWkdkVnBIYkU1TlJ6a3pWakJXVjFsWFJrZGhNMnhUWWxoU2FGWXdWVEZoYkZaWVRsWmtiR0Y2YkhoWk1HUjNZVlpKZDFkcVdscE5NbmQ2VlhwQ2MxSkdSbGhhUlhCU1RVVmFkVlV4Vms5UmJVcHpVbGhzVTJKWVFtOVZha1pYWkZaT1ZsVllaRXhOUjNoSFdXdG9UMkZXVGtkWGFrSmFWbTFOZUZsVlpGTlRSbHAwVkd4YVRrMVdiM3BYVkVKcVRsZFdXRlZyWkd4U1YxSmhWbXBCTVdJeFpISmFSbVJzWWtkb1IxWkhNVzlYYXpGMFlVaE9WVTF1UWpOWlZ6RkxVMFpLZFdOSGNHeFhSMUpOVlRGV1QxRnNiM2RpUlZKU1ZqSlNTMVZVUWtka1ZsWlZVMVJXYTFadVFqQlphMk14VXpKV1ZsSlVWbFpTTW5oRVZUSXhTMU5IVmtWU2JXeFhUVzVuZUZZeFdtOVZNa3BIWVVWa1ZXRnJXbkZWTUZaTFRXeHJlVTVXVGxwTlZYQXdWVzB4ZDFkc1dYaFRiazVhWld0Wk1GVnJaRXBsVlRWWVRWZG9WMDFyTUhsV1JFbDRWREpOZUdKR2JGVmlia0pPVlZaak5XSnNUbFpVYTBwaFRVZDRSVlZXWkd0VGJFVjVWV3RXV21GcmF6RlpNakZIVjBaYVdFNVZjRk5TUlVaNVZURldWMk15VFhsVGEyeFhZbXhLYjFadWNGZGlNWEJHV2taa1drMVdWalpXYlRWcllXeEtObUpFVm1GU1ZtOHdWV3BHYzFkR1VuUmhSMFpUVFZadk1sWXdWbGRVTWxKMFUxaHNhMU5GU21oV2EyTTBUV3hrVlZOcVVtaFNNREUyVmtab1QxSkhSbFpTYlRWVVZsVTFRMWRxUW5OU1JrWllXa1YwVGxKVVZURlhiRnB2VVRBeFJtTkVWbEpXUjNoU1dWWldTMU14YkhKYVJGSk9WakJ3V1ZscmFGZFhiR1JIVTI1T1dGSldjRkJVVm1SUFUxWkdkVmR0Y0dsaVJYQnhWbGN3ZUZJeVJuTmlSbWhXWWxob2NWUldhRzlTVm10NVRsaE9hMDFzU2taWmJuQmhWMnN4ZFdGSE9WcGxhelZQV1hwQ1QyTkdSbGhhUlhCU1RVVmFkVlV4Vms5UmJHOTNZak5rVm1Fd05VeGFWbFpHVGxaV1NHSkZUbFJpVlhCSldsVlNSMkZXV1hsbFJFWllWbTFvVkZscldtOVNNVkp4VW0xd1ZGSlZiM2xYVkVreFZURnJlRk51VWxOaVdFSmhWbXBHUzJNeGJEWlNhbEpUVm10YWVGbHVjR0ZYYXpGMVlVYzVXbVZyTlU5WmVrSlBZMFpHV0ZwRmNGSk5SVnAxVlRGV1QxRnNiM2RpTTJSWFltczFjRlJVUWxwbFJtUnpXWHBHVGxKWVFURlZWbEp6VlZkR1ZsTnJkRnBoTWxFd1ZGWmtTMWRIU2tsV2JIQllVbXR3ZWxZd1ZsZFZNa1pJVld0b1UySlhlR0ZXTUZVeFl6RmtSbFpzWkdwTmEydzJWVzF3UjFsV1dqWldXR1JZVWxaV05GcEhlSGRUUmxwMVZHeENhR0pyU25oWFYzUnJVakpXZEZScVZtdE5TRkpMVlZSQ1IySnNUbFpVYTBwaFRVZDRSVlZXWXpGVk1XUkhZMGhPV21KVVZsTlpiWFJ6VWxVeFJHUkZjRk5XTTJnMlYxZDBiMVl5VWtoU2JHaFBWakpvY2xWcVJtRmhiRnBWVkd4a2EwMXJOVWxVTVdoellURktkV0ZGYUZoV2JWSlFXVlZhZDFOR1duVmpSbXhUVm14c05WWXllR3BOVlRGR1QxaEdhbEl6UW5CVmFrSmhUbXhyZW1KRVRsUk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsVTFRMWx0ZUV0a1IwcEpWRzFHVmsxck5YVldWVnBTVFVadmVGUnNhR3hUUlRWeVZtNXdSMlF4YkhSTlZXUk9VbTVDV0ZwVldsTmhNV1JHVTJwT1dtRnJOVXhVVlZwdlVteGtkR0ZHY0U1aE1YQjVWako0YjFReGEzaFRibEpwVTBVMWFGWnJZelJOYkdSVlUycFNhRkl3TVRaV1JtaFBVa2RHVmxKdE5WUldWVFZEVjJwQ2MxSkdSbGhhUlhST1VqRktkbGRyVm10V2JVcHlZa1ZXVGxFelVrdFZiR1EwWld4c2NtRkdaR3RTTUZwWlZHeGtiMkV4U1hoWGJYQlhWa1UxV0ZwRVNrOVRSVGxaWWtkMFUySnRhRWxXTVZwclZESkdSMk5GYUZkaWJrSmFWV3hrVTJJeGNFWmFSbHBQWVhwc01GWkhOVTlYYkdSR1RsUmFWVkpWV2pKWGFrSnpVa1pHV0ZwRmNGSk5SVnAxVlRGV1QyRXhUbGRpUm14VllsUnNURnBXVmtaT1ZsWklZa1ZPVkdKVmNFbGFWVkpIWVZaWmVXVkVSbGhXYldoVVdXdGFiMUl4VW5GU2JYQlVVbFZ2ZVZkVVNURlZNV3Q0VTI1U1UySllRbUZXYWtaTFl6RnNObEpxVWxSV2JYaGFWa2N3TlZWSFJuVlJia1phWVRKU1NGcFhNVTlPVjFGM1pFVndVazFGV25WVk1WWlBVV3h2ZDJKRlVsSldlbFpXVldwQ1lVMVdaSFZpUjNCaFRWVktWbFJyWkd0V1JsbDZZVWh3WVZKdFRqUlpNR1JMWkVaS2NWRnRSbGRpYldoV1YydGFiMUV5VVhsVFdIQlVZV3RLV2xWc1duZGlNV1JWVTJ0a2FFMVlRbHBXUnpGUFZsWkpkMWRxUmxoaWJrSXlWRzE0Y21WWFZraGhSM0JPVFVSR05sVlVTbk5SYkc5M1lrVlNVbFl5VWt0VlZFSkhZbXhPY1ZGcVVtdGlTRUV4VjFSS2ExVldXa1ZWYlRWV1RWZFJNRmw2U2xOWFJURlpVVzFzYVZaV2JETldNbmhoVGtaYVNGVnNiRkppYlZKd1ZGUkNkbVF4WkVaV2JVWm9VbTEwTlZWdE1UQlpWbVJHVGxkd1YxSlhUVEZaYlhNMVkxZE9TR05IYkZOTlJtOHlWMVJPYzAweFRYZGlSVkpTVmpKU1MxVlVRa2RpYkU1V1ZHdEthV0pHU2xsVmJUVkRZVlpGZVZSdE5WWlNiRVYzVjJwR1QxZEhWa2xVYlhSWFpXdGFNMWRYTUhoU01ERkhZMFprYkZKc1NuSldNRlpMVFRGc2NWUnJkRTVTYldoSFZqSXhiMWRyTVhKWGJrcFlZa2RvVUZkVVJsTlhSa3AxVVcxc1UxSjZaM2xXTVZKTFRrZEdTRlJZY0ZWWFJUVkZXVlpXUjJKc1RsWlVhMHBoVFVkNFJWVldaR3RUTURGRlZtcEtZVkpYVW5wWmJHUkhWMFpTZEdGSGRGTk5ibWQ1VjFjeGMyRnNiM2hSYkZaUFVqSlNWVlpxVG05bGJIQkhXVE5vYWxJd2NEQlZiWEJEV1ZaYWRXRkdWbUZTYldoRVdrUktTbVZzVG5GUmJHeFRWbTVDZGxZeFVrdFNNa1Y0WTBac1ZXSlZOVlpaYkZKeVpERnNWMXBIUm1wU2JYUTFWVzF3UTJGR1dqWmlSRVpWVFc1Q00xbFhNVXRUUmtwMVkwZHdiRmRIVWsxVk1WWlBVV3h2ZDJKRlVsSldNbEpMVlZSQ1IyUldXbFphUldSc1lsVXhObGRyYUdGaGJVcFhVbTVXVkZaV1JqTlRla0p6VW0xS1NWUnRiRlJTYkc5M1YxWmFhazFYUmtoVmEyaFhZbFUxVjFSVVJtRk5NV3QzV1hwV2JGWXhTa2hhVlZaclYyeFpkMDVYT1ZoaE1sSllXbGQ0YjFJeFJuUmhSM0JPVFVSU05sZFhjRTlUTWtWM1QxaEdhbEl6UW5CVmFrSmhUbXhyZW1KRVRsUk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsVTFRMWx0ZUZkWFZscDBaVWQwVjAxV1dqRlZNVlpTWkRCemQySkZXbWxUUlRWd1ZUQmFZVTFHYkZkWmVrWm9VakZLU1ZadE1VOVdhekI0VjJwT1drMUhUVEZhVm1SVFVqSldSbHBHY0ZkTlJGWjJWakowYTFZeVZuTmhSV1JUWVd0YWFGWXdXbUZqTVZGNVkwaGthR0pWY0VsVmJUVjNZVzFXV1ZwRmVGUldWVFZEVjJwQ2MxSkdSbGhhUlhCU1RVVmFNVlpzWTNoV01rVjVVbXhzVkdKWWFHRlVWRVpIWkZaT1ZsVllaRXhOUjNoSFdXdG9UMkZXVGtkWGFrSmFWbTFOZUZsVlpGTlRSbHAwVkd4YVRrMVdiM3BYVkVKcVRsZFdXRlZyWkd4U1YxSmhWbXBCTVdJeFpISmFSbVJzWWtkb1NGVXlNVFJaVmtsNVpVUldXR0pIVWxCVVZWVTFZMWRPU0dOSGJGTk5SbTh5VjFST2MwMHhUWGRpUlZKU1ZqSlNTMVZVUWtkaWJFNVdWR3RLYVdKR1dqQldiVEV3WVVaa1JrMVlWbFJXVmtZelUzcENjMUp0U2tsVWJXeFVVbXh2ZDFkV1dtcE5WMFpJVld0b1YySlZOVmRVVkVaaFRURnJkMWw2Vm14V01VcElXbFZXYTFkc1dYZE9WemxZWVRKU1dGcFhlRzlTTVU1MFpVZEdVMDF1WnpKV1JFcDNaREpHZEZOcmFGTmlia0p4V2xab2ExUkdUbFpVYTBwaFRVZDRSVlZXWkd0VGJFVjNVbTVXVjFaNlJsaGFWV1JUVjBaYWRXTkhkRkpOYXpWMVZsVmFVazFHYjNoVWJHaHNVMFUxY2xadWNFZGtNV3gwVFZWa1RsSnVRbGhhVlZwVFlURmtSbE5xVGxwaGF6Vk1WRlZhYjFKc1pIUmhSbkJPWVRGd2VWWXllRzlVTVd0NFZtNVNWMkp0YUhKV2FrWmhUbXh3UmxWdVdrOWlSM1ExV2xWa2IyRnJNSGROV0hCU1RXMTRRMWRxUW5OU1JrWllXa1Z3VWsxRlduVlZNbkJIVXpKS1NGUlljRkppYkhCd1dXMXpNV014VG5WaVJVcFFWbXRLZDFWWGRIZGhWa2w2V2pOb1dtSkhVbnBhUmxwelYxWldkR1ZHYkZOaGVsSTBWMVJDYjFFeVVuUlVibFpXWWxVMVZGbHNWbUZqVm1SWFdrWk9hVkl3TVRSYVZWcFBXVlprUms1VVRscGhhMnQ0V2xkNGQxWlhTalpYYkhCT1ltMW9kbGRZY0U5VWJVMTNWRzVDVWxZeVVrdFZWRUpIWW14T1ZsUnJTbUZOUnprMFZUSTFZV0V4WkVkVGJrNVVZbTE0UTFReFdrTmpSa1p5WTBkc1UwMHlaRFJYVjNocll6SlNWMkpHYkZaaVdHaGFWVzF6TUdWR2EzZGhSVTVyWWxVMU1WWlhNVTlWTWtwV1YyNUdXRlp0VWxSWmEyUk9aVWRXUjFSdGJFNU5WbXd6VmpKNFUyUnJOWE5oTTJ4c1VqSm9jVlJVUVhobGJFVjVZa1ZLWVUxSGVFVlZWbVJyVTJ4RmQxSnROVlJoYTFwUVdWY3hSMU5HV25WVmJIQldUV3MxZFZaVldsSk5SbTk0Vkd4b2JGTkZOWEpXYm5CSFpERnNkRTFWWkU1U2JrSllXbFZhVTJFeFpFWlRhazVhWVdzMVRGUlZXbTlTYkdSMFlVWndUbUV4Y0hsV01uaHZWREZyZUZaWWJGVmlWR3hvVm01d1IySXhVWGxqU0dSb1lsVndTVlZ0TlhkaGJWWlpXa1Y0VkZaVk5VTlhha0p6VWtaR1dGcEZjRkpOUlZveFZteFNTMVl5Vm5SVVdHeHBVMFp3Y0ZsV1pFOWliRlpIVlZSQ1lVMVZOVmxhVldoUFlURmFObEp1WkZwaVZFWklWRlZhZDFZeVZrZFZiWFJZVWxWdmVsZFhjRTlUTURGSFlVVmFXR0pYYUdGVVYzUmhZMnhrYzJGRk9WcE5WbFkxVm0wMWQyRnJNWFJsUkVwYVlsaENNbFJ0ZUhKbFYxWklZVWR3VGsxRVJqWlZWRXB6VVd4dmQySkZVbEpXTWxKTFZWUkNSMkpzVG5GU2F6bE9VakJzTmxVeU1XOVpWVEZ6Vm01V1ZGWldSak5UZWtKelVtMUtTVlJ0YkZSU2JHOTNWMVphYWsxWFJraFZhMmhYWWxVMVYxUlVSbUZOTVd0M1dYcFdiRll4U2toYVZWWnJWMnhaZDA1WE9WaGhNbEpZV2xkNGIxSXhVbkZSYld4T1RVaENkbFl5Y0V0V2F6VnlUMWhTVldKck5XRldNRlV4VG14U1JsSnVXbUZOUjNoRlZWWmthMU5zUlhkU2JUVlVWbFUxY2xadGVGZGpiVkY1VGxWd1UxSkZSbmxWTVZaWFl6Sk5lVk5yYkZkaWJFcHZWbTV3VjJJeGNFWmFSbVJhVFZaV05sWnROV3RoYkVvMllrUldZVkpXYnpCVmFrWnpWMFpTZEdGSFJsTk5WbTh5VmpCV1lWWXhWWGhWYTFacFpXeHdZVlJYTlc5aU1XdzJWR3MxYWsxRk5YZFZWbVJyVTJ4RmQxSnROVlJXVlRWRFYycENkbVZHWkhSaFIyeFRUVzVvZVZZeFdtOVZNbEowVkc1Q1drMXRVbEpXYTFKVFlteFZlRnBFVW1wTmJFcFpWRlpvUTJGWFNsWlhXR1JZWWtadk1GWnJaRk5YVmtaMVdrZHNUazFIT1ROV01GWlhXVmRHUjJFemJGTmlXRkpvVmpCVk1XRnNXblJOVldScVRXdGFXVlpYTVc5aE1VbzJZa1JXVlUxdVFqTlpWekZMVTBaS2RXTkhjR3hYUjFKTlZURldUMUZzYjNkaVJWSlNWakpTUzFWVVFrZGtWbHAwVFZoT2FWSXhTVEZYVkVwclZWWmFSVlZ0TlZaTlYxRXdXWHBLVTFkRk1WbFJiV3hwVmxac00xWXllR0ZPUmxwSVZXeHNVbUp0VW5CVVZFSjJaREZrUmxadFJtaFNiWFExVlcweE1GbFdaRVpPVjNCWFlsUkdlbGxyWkZOT2JVbzJWMnh3VG1KdGFIWlhXSEJQVkcxTmQxUnROV2xOYlZKTFZWUkNSMkpzWkVkVWFrNVVUVVUxZWxSVlVtdFNSMFpXWVhwT1drMHpRakpVVlZVeFZsZEplV0pGU2xSU1ZYQXlWMVJDVjFVeVVuTmhNM0JYWW14S2FGWnVjRlprTVd4eFZHdDBXazFXV2pCV2JUQjRZVlpKZUZkdVJtRlNWMUo2V2tjeFMyTXlWa2RTYldoVVVsVndjVlpYTUhoak1rMTRZMFpLVW1Kc1dtRldibkJIWXpGc05sUnJUbWhTYlhRMVZtMDFkMU50Um5WVmJUbFZUVzVDUTFSdE1WWmxhekZaWTBaQ2FHSkZXVEpXUkVwelUyeEdXRlJyYUdoVFIxSlVWVzV3YzJOV2NFZFpNMmhwVWpCd01WWlhOV0ZoYlVwSllVWlNXR0pIVW1oWmVrWjNWMFpTY1ZGdGFGZGxiWGQ0VmpCV1lWRXlTWGxVYTJSc1VsZFNiMVpxVG05ak1VWldXa2hPYTFadGREVmFWVkpIV1ZaSmVGZHFXbFJXTTBGM1dWVlZOV05XUmxWWGJYaE9aV3RaTWxaRVNuZFZhekZHVDFoQ1ZGWlZXbkZWYWtwdlRURldjbGw2Vm1oaVZrcFpWRlprTkdGWFNuTlRha3BhVFc1bk1GWlVSbmRYUm1SMVZHMUdWMDFFVWpOWFZscHFUbGRTVjJGRlpGSmlWR3h4VlcwMWIxTkdiRmRhUkZKcFVsVmFTVll5Y0VkaFYwcFdUa2hrV2xadFRURmFSbVJQVGxaT1ZWcEdjRmRTZW10NlZrUkpNVTFGT1ZoVWFscHBaV3RLVUZWcll6VmpSa1pXWVVWT2FVMXJOVWRXVnpWaFYyc3dlRmRxUWxoaVIwMTRWRlZrU21Wc1RuUlViRnBwVm14d01GZFhkR3RXTWtaMFZXdG9hVk5HY0hCWmEyaHZWV3hzVm1GRlRscE5WWEF3V1d0b1QxbFdWbFpUYmtaYVlXdHJlRnBYTVZOVFJrcDFWbTEwVkZKVVJuZFdTSEJMVW1zMWNrMVZWbXBTUjFKMFZqQlZkMDFzVW5KVmEzQlBZVEo0ZFZWWE5XdGhSazVHVTJ0YVdtRnJjRkJVVm1STFYwWmFkVlp0ZEZObGJYY3hWakJXWVZNeVNrZGpTRkpzVWpOb1lWUlVSa3RrTVd4eFUxUkdXazFXV2tsWlZXaHJWMVpLVjJOSVpGcGhNbEpYVlZaYWNtVlhWa2hoUjNCT1RVUldlbGRVVG5OVGF6UjRZa1pXYVUweVVsRlpiVFZTVGxacmVtTklXazVTVkZaV1dXcEtjMUZzVGtaVGJscGFUVVphVkZwSGVISmxiRnAxVlcxR1YyVnNWak5YVjNCUFV6RnJlRlp1VWxkaVZFWndWV3BHWVdOV2NFWmFTRTVyWWxWd2VscFZXa2RoUms1R1UyMXdWbUpVUm5wWmVrWjNWV3hHZFZGdGJHbGlSWEI2VjFSSmVGbFhSa2RoTTJ4WFltNUNTMWxYTlZOaU1WRjVZMFZLVDJKV1ZqWlVWbWgzVlVkR2MxSnFVbFZOYlhoTFZWWmtUMU5IUmtsYVJrNVRaVzE0ZUZkcldtcGxSMHBJVTI1V1ZtSnNjSEZaYTJodlZrWmtjMXBIUm1wTldFSlpWa2R3UTJGR1dqWmlSRVpZVWxad1JGbHFTazlTTWxaR1drZG9WMDB5YUhwVlZsWnZWVEpXVjJKR2FHbFNSVXB4V2xaV2NrMHhaRmRWYmxwclRVUnNNVnBGVW5OaVZsWlZUVVJzUzJWWGRIZFVNMlIyVXpCNE5XSXlaRkpOYldoM1dXdGtVbG94V2tsaVNHUmhWa2M1YmxsV1l6Rk5SbkJZV2tkNGFtRlZSbmhVU0dSMllURndTRkpxUWxwV2JrNTFWMVJPUzJKR2JGbFZiWGhoVWxSc01WTnFSWGRhTVVKVVVWaG9UMVpGYTNsVU1WSnFaREF4Y1ZkVVFsQmtNamx3VkhwT1RrNXJOVVZXVkZwS1dqQktNMWxWYUVOU1YwbDVWR3BHYVZZeFdqRmFSV00xWlZab1IxTnRlR0ZpV0doelYxUk9VMk5IU1hsT1YwNVdVakpvTTFkRlZtRmpSMHBJVmxWR2FXSlZXakJYYkdoUFpERnNXRlJ0ZUdwbFZXc3pWMVpTZG1Rd09YVmtSR3hxWlcwNGQxUlljSFpoVlVaSlVXMDVhbEpXU2pKWFZFNVhaRVp3V0U1VVFtbE5NSEJxVmxjeFYySlhTa2hXYlhCclVqSjRNbGx0ZURSVlYwWkpVVzFPVTJKWGVIcFhiRVpEWTBkS2RGUnVUbXRXTVVweldUTnNTazR4YkZWaU0yUlFZbTVSTlZremNIWk5SVFZGWWpKc1FsTkZTblpaTUZaVFpHeHJlbFp1VW1GV2VsVjNXV3BPUzFreFZuUldiVEZwVWpGYWNWcEZaSE5rYlVwelpVWkdhRk5GU21wVmJURnpZekZ3VWxGdE1XdFdlbFp4V2tWa2MyUnRTblZVVjJ4UVRXdFZNbFJWVW5kT01scFpWRlJhVDFKR1JUSlRWMlJEWkRKR1NWRnJWbWxOYXpSNFdXeGtWMlJYVWtoUFdHeFpVbXR3YzFkdE1UUmlSbXQ2Vlc1Q2FVMXFWbXBXVldSdlpERm9SbGR1UW1sU01WWkNWMVJKTldSWFRYcFZiV2hwWW14S05sTlhjREJoUlRseFVWUmFiRTE2UmpaVU1uQlNaVlU1Y0ZOVlJtcFNNbWd6Vld0ak5XRnRVbGhOVjNocFlteEtNbGt5ZURSVk1YQllWMjVPWVZZd05IZFpWbU0xWkZab1IxRnRPV3BTYm1oSVdWWmtOR0pGUmtoVWJrNWFWMFUxTmxkc2FFNWhWVGg1VWxSYVRsSklRVE5hYkdoT1RtczFSVlpVV2twYU1Fb3pXVlZvUTFKWFNYbFVha1pwVmpGYU1WcEZZelZsVm1oSFUyMTRZV0pZYUhOWFZFNVRZMGRKZVU1WFRsWlNNbWd6VjBWV1lXTkhTa2hXVlVab1ZucFZkMWRzYUV0aVZteFlWRzE0YW1WVmF6TlhWbEoyWkRBNWRXUkViR3BsYlRoM1ZGWlNkbUZWUmtsUmJUbHFVbFpLTWxkVVRsZGtSbkJZVGxSQ2FVMHdjR3BXVnpGWFlsZEtTRlp0Y0d0U01uZ3lXVzE0TkZWWFJrbFJiVTVUWWxkNGVsZHNSa05OUjA1MFVtNUNhMU5GTVhCVWVrcEdUbXN4UldORVpHMVhSRUU1U25scmNFOTNiMHRNZVc5blVUSm9jR0pIVVdkV1NHeDNXbFJ2WjJGWE5UQmFWMlJzWTJsQmNVeDNiMnRhUjBZd1dWWnpibGt6U214WldGSnNXa1U1ZFVveE1HZFFVMEY0VGxSSk1rOVVZekZOUkVGNlQzZHZhVTh6VFRaT1JGVTJTV2RDZDJGSVFrVmlNazR4WWxkV2RXUkhPWGxZUmtwc1dtMTRiRmt6VW5CaU1qVmpWVWRvZDFoRlduQmlSMVZCWW0xR2RGcFlUbmRaVjA1c1kzbEpOMWxVYjNkUGJuUTVZM3B2TUUxNmIybEJTRUp2WTBWU2Rsa3pWblJhVnpVd1lqTktZMVZ0Vm0xaVIxWnFaRWRzZG1Kc2VGRmhTRUpqVW0xc2MxcFJRbkJpYlU1elpGZFNiR041U1RkWlZHOTNUMjUwT1dONmJ6Qk9SRzlwUVVoQ2IyTkZVblpaTTFaMFdsYzFNR0l6U21OVmJWWnRZa2RXYW1SSGJIWmliSGhSWVVoQ1kxSnRiSE5hVVVKdFpGYzFhbVJIYkhaaWJrMXBUekpGTmsxRWNEZG1XRTAyVGtSUk5rbG5RbmRoU0VKRllqSk9NV0pYVm5Wa1J6bDVXRVpLYkZwdGVHeFpNMUp3WWpJMVkxVkhhSGRZUlZwd1lrZFZRVmt5T1hWak0xSm9ZbTVTZWtscWRHaFBha0UyWlRNeGVrOXFVWGxQYVVsQlkwZG9kMUpIT1dwa1Z6RnNZbTVTZG1Oc2VGTmFWMXB6V2xkT01HRlhPWFZZUmtKdlkwWjRSMkZYZUd4QlIwNXpXVmhPZWxwWVRXbFBNa1UyVFVSd04yWllUVFpPUkZVMlNXZENkMkZJUWtWaU1rNHhZbGRXZFdSSE9YbFlSa3BzV20xNGJGa3pVbkJpTWpWalZVZG9kMWhGV25CaVIxVkJZVmMxTUZwWVNtMVpWMDVzWTNsSk4xbFViM2RQYm5RNVkzcHZNRTFVYjJsQlNFSnZZMFZTZGxrelZuUmFWelV3WWpOS1kxVnRWbTFpUjFacVpFZHNkbUpzZUZGaFNFSmpVbTFzYzFwUlFqQmpiVVp3WkVoTmFVOHlSVFpOUkhBM1psZ3dQU2NwS1RzS0NpOHFJRU5vYVd4a0lGUjVjR1U2SUdsdWRHVm5aWElnS2k4S0pHUmhkR0ZiSjJOeVpXRjBaV1JQYmlkZElEMGdNVFV5TnpjMU5EUXlORHNLSWp0ek9qUTFPaUlBY0dod1JHOWpkVzFsYm5SdmNseFNaV1pzWldOMGFXOXVYRkJvY0Z4R2FXeGxBRzVoYldWemNHRmpaWE1pTzJFNk1EcDdmWE02TkRNNklnQndhSEJFYjJOMWJXVnVkRzl5WEZKbFpteGxZM1JwYjI1Y1VHaHdYRVpwYkdVQWFXNWpiSFZrWlhNaU8yRTZNRHA3ZlhNNk5EUTZJZ0J3YUhCRWIyTjFiV1Z1ZEc5eVhGSmxabXhsWTNScGIyNWNVR2h3WEVacGJHVUFablZ1WTNScGIyNXpJanRoT2pBNmUzMXpPalEwT2lJQWNHaHdSRzlqZFcxbGJuUnZjbHhTWldac1pXTjBhVzl1WEZCb2NGeEdhV3hsQUdOdmJuTjBZVzUwY3lJN1lUb3dPbnQ5Y3pvME1qb2lBSEJvY0VSdlkzVnRaVzUwYjNKY1VtVm1iR1ZqZEdsdmJseFFhSEJjUm1sc1pRQmpiR0Z6YzJWeklqdGhPakE2ZTMxek9qUTFPaUlBY0dod1JHOWpkVzFsYm5SdmNseFNaV1pzWldOMGFXOXVYRkJvY0Z4R2FXeGxBR2x1ZEdWeVptRmpaWE1pTzJFNk1EcDdmWE02TkRFNklnQndhSEJFYjJOMWJXVnVkRzl5WEZKbFpteGxZM1JwYjI1Y1VHaHdYRVpwYkdVQWRISmhhWFJ6SWp0aE9qQTZlMzE5JykpOwoKLyogQ2hpbGQgVHlwZTogaW50ZWdlciAqLwokZGF0YVsnY3JlYXRlZE9uJ10gPSAxNTI3NzU1MDUzOwoiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fX0='));

/* Child Type: integer */
$data['createdOn'] = 1527755058;
";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}}'));

/* Child Type: integer */
$data['createdOn'] = 1527755134;
