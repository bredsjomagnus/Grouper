<?php 
/* Cachekey: cache/stash_default/documentation\api\php\28a60ccfe04286f5c5e19c83fc3ba4e2/ */
/* Type: array */
/* Expiration: 2018-06-04T16:40:19+00:00 */



$loaded = true;
$expiration = 1528130419;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode('O:33:"phpDocumentor\Reflection\Php\File":12:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"80c4b43fce84aef00cc840755c06cf63";s:39:" phpDocumentor\Reflection\Php\File name";s:20:"2dda58fbae7a5894.php";s:39:" phpDocumentor\Reflection\Php\File path";s:121:"build/api-cache/0fea6a13c52b4d47/25368f24b045ca84/38a865804f8fdcb6/57cd99682e939275/fe90297cdde80307/2dda58fbae7a5894.php";s:41:" phpDocumentor\Reflection\Php\File source";s:36900:"<?php 
/* Cachekey: cache/stash_default/documentation\api\php\5b962d99ccc414c620a57ee8eddcfc8a/ */
/* Type: array */
/* Expiration: 2018-06-05T00:14:17+00:00 */



$loaded = true;
$expiration = 1528157657;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode('TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjJhZTQ2ZDEyMGJjN2JhODM3NjRhNTlmYzA4M2QxYmNmIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MjA6IjMwNDBhM2QzNDAxZWU0MWIucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6MTIxOiJidWlsZC9hcGktY2FjaGUvMGZlYTZhMTNjNTJiNGQ0Ny8yNTM2OGYyNGIwNDVjYTg0LzM4YTg2NTgwNGY4ZmRjYjYvNTdjZDk5NjgyZTkzOTI3NS8wNjgzZGYzZjkyNTA3YTg4LzMwNDBhM2QzNDAxZWU0MWIucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czoyNjUwNDoiPD9waHAgCi8qIENhY2hla2V5OiBjYWNoZS9zdGFzaF9kZWZhdWx0L2RvY3VtZW50YXRpb25cYXBpXHBocFwyZDY3YTM3NDlhMjg1OWQ3ODU2YjExZmE4YTZkYjYxYi8gKi8KLyogVHlwZTogYXJyYXkgKi8KLyogRXhwaXJhdGlvbjogMjAxOC0wNi0wNFQxNToyMjowNiswMDowMCAqLwoKCgokbG9hZGVkID0gdHJ1ZTsKJGV4cGlyYXRpb24gPSAxNTI4MTI1NzI2OwoKJGRhdGEgPSBhcnJheSgpOwoKLyogQ2hpbGQgVHlwZTogb2JqZWN0ICovCiRkYXRhWydyZXR1cm4nXSA9IHVuc2VyaWFsaXplKGJhc2U2NF9kZWNvZGUoJ1R6b3pNem9pY0dod1JHOWpkVzFsYm5SdmNseFNaV1pzWldOMGFXOXVYRkJvY0Z4R2FXeGxJam94TWpwN2N6bzBNem9pQUhCb2NFUnZZM1Z0Wlc1MGIzSmNVbVZtYkdWamRHbHZibHhRYUhCY1JtbHNaUUJrYjJOQ2JHOWpheUk3VGp0ek9qTTVPaUlBY0dod1JHOWpkVzFsYm5SdmNseFNaV1pzWldOMGFXOXVYRkJvY0Z4R2FXeGxBR2hoYzJnaU8zTTZNekk2SWpBeU1UTmtZekppTnpOaU1qbGtNalF5WVRBMU1qYzRZMlE1WW1RMU5ESmpJanR6T2pNNU9pSUFjR2h3Ukc5amRXMWxiblJ2Y2x4U1pXWnNaV04wYVc5dVhGQm9jRnhHYVd4bEFHNWhiV1VpTzNNNk1qQTZJbVpsT0RBeU4yUTNPVEUyWTJZM1lUUXVjR2h3SWp0ek9qTTVPaUlBY0dod1JHOWpkVzFsYm5SdmNseFNaV1pzWldOMGFXOXVYRkJvY0Z4R2FXeGxBSEJoZEdnaU8zTTZNVEl4T2lKaWRXbHNaQzloY0drdFkyRmphR1V2TUdabFlUWmhNVE5qTlRKaU5HUTBOeTh5TlRNMk9HWXlOR0l3TkRWallUZzBMek00WVRnMk5UZ3dOR1k0Wm1SallqWXZOVGRqWkRrNU5qZ3laVGt6T1RJM05TOWlNMlppWXpZNVpUYzRNelUxTXpFMkwyWmxPREF5TjJRM09URTJZMlkzWVRRdWNHaHdJanR6T2pReE9pSUFjR2h3Ukc5amRXMWxiblJ2Y2x4U1pXWnNaV04wYVc5dVhGQm9jRnhHYVd4bEFITnZkWEpqWlNJN2N6b3hPRGN3T0RvaVBEOXdhSEFnQ2k4cUlFTmhZMmhsYTJWNU9pQmpZV05vWlM5emRHRnphRjlrWldaaGRXeDBMMlJ2WTNWdFpXNTBZWFJwYjI1Y1lYQnBYSEJvY0Z3eFpERmxOekF5TnpnMVl6VTFNV1JoWm1RM1ptTmpaalZsWkRrME5EWXlNaThnS2k4S0x5b2dWSGx3WlRvZ1lYSnlZWGtnS2k4S0x5b2dSWGh3YVhKaGRHbHZiam9nTWpBeE9DMHdOaTB3TkZReU1EbzFOam96T0Nzd01Eb3dNQ0FxTHdvS0Nnb2tiRzloWkdWa0lEMGdkSEoxWlRzS0pHVjRjR2x5WVhScGIyNGdQU0F4TlRJNE1UUTFOems0T3dvS0pHUmhkR0VnUFNCaGNuSmhlU2dwT3dvS0x5b2dRMmhwYkdRZ1ZIbHdaVG9nYjJKcVpXTjBJQ292Q2lSa1lYUmhXeWR5WlhSMWNtNG5YU0E5SUhWdWMyVnlhV0ZzYVhwbEtHSmhjMlUyTkY5a1pXTnZaR1VvSjFSNmIzcE5lbTlwWTBkb2QxSkhPV3BrVnpGc1ltNVNkbU5zZUZOYVYxcHpXbGRPTUdGWE9YVllSa0p2WTBaNFIyRlhlR3hKYW05NFRXcHdOMk42YnpCTmVtOXBRVWhDYjJORlVuWlpNMVowV2xjMU1HSXpTbU5WYlZadFlrZFdhbVJIYkhaaWJIaFJZVWhDWTFKdGJITmFVVUpyWWpKT1EySkhPV3BoZVVrM1ZHcDBlazlxVFRWUGFVbEJZMGRvZDFKSE9XcGtWekZzWW01U2RtTnNlRk5hVjFweldsZE9NR0ZYT1hWWVJrSnZZMFo0UjJGWGVHeEJSMmhvWXpKbmFVOHpUVFpOZWtrMlNXMU9hMDFxVm1wWlZFVTFXbFJaZDAxWFJYcGFhbU42V1ZSa2JGbDZWVEJPVkd4c1dYcE5NMXBxWjNoSmFuUjZUMnBOTlU5cFNVRmpSMmgzVWtjNWFtUlhNV3hpYmxKMlkyeDRVMXBYV25OYVYwNHdZVmM1ZFZoR1FtOWpSbmhIWVZkNGJFRkhOV2hpVjFWcFR6Tk5OazFxUVRaSmFtZDVXWHByZVZreVRteE5hbEY1VFcxRk5FNUVXWFZqUjJoM1NXcDBlazlxVFRWUGFVbEJZMGRvZDFKSE9XcGtWekZzWW01U2RtTnNlRk5hVjFweldsZE9NR0ZYT1hWWVJrSnZZMFo0UjJGWGVHeEJTRUpvWkVkbmFVOHpUVFpOVkVsNFQybEthV1JYYkhOYVF6bG9ZMGRyZEZreVJtcGhSMVYyVFVkYWJGbFVXbWhOVkU1cVRsUkthVTVIVVRCT2VUaDVUbFJOTWs5SFdYbE9SMGwzVGtSV2FsbFVaekJNZWswMFdWUm5NazVVWjNkT1IxazBXbTFTYWxscVdYWk9WR1JxV2tSck5VNXFaM2xhVkd0NlQxUkpNMDVUT0RWTmVrRXhXa2ROTlU1RVVUUmFSMGw0V1ZSQmVFeDZaM2xaZW10NVdUSk9iRTFxVVhsTmJVVTBUa1JaZFdOSGFIZEphblI2VDJwUmVFOXBTVUZqUjJoM1VrYzVhbVJYTVd4aWJsSjJZMng0VTFwWFduTmFWMDR3WVZjNWRWaEdRbTlqUm5oSFlWZDRiRUZJVG5aa1dFcHFXbE5KTjJONmIzaE5hbWN5VFVSdmFWQkVPWGRoU0VGblEyazRjVWxGVG1oWk1taHNZVEpXTlU5cFFtcFpWMDV2V2xNNWVtUkhSbnBoUmpscldsZGFhR1JYZURCTU1sSjJXVE5XZEZwWE5UQlpXRkp3WWpJMVkxbFlRbkJZU0VKdlkwWjRhVnBVUVRGTmFsa3dXbTFGTlU5SFJUUlBWRUpyVFhwc2FscEhWbXRPZW10NFRXcFZlRTlVV1RCUFF6aG5TMms0UzB4NWIyZFdTR3gzV2xSdloxbFlTbmxaV0d0blMyazRTMHg1YjJkU1dHaDNZVmhLYUdSSGJIWmlhbTluVFdwQmVFOURNSGRPVXpCNVRteFJlRTlVYjNsTlZHOHdUbE56ZDAxRWIzZE5RMEZ4VEhkdlMwTm5iMnRpUnpsb1drZFdhMGxFTUdka1NFb3hXbFJ6UzBwSFZqUmpSMng1V1ZoU2NHSXlOR2RRVTBGNFRsUkpNMDE2V1hsT1ZFRXhUM2R2UzBwSFVtaGtSMFZuVUZOQ2FHTnVTbWhsVTJkd1QzZHZTMHg1YjJkUk1taHdZa2RSWjFaSWJIZGFWRzluWWpKS2NWcFhUakJKUTI5MlEybFNhMWxZVW1oWGVXUjVXbGhTTVdOdE5HNVlVMEU1U1VoV2RXTXlWbmxoVjBaellWaHdiRXRIU21oak1sVXlUa1k1YTFwWFRuWmFSMVZ2U2pGU05tSXpjRTVsYlRsd1dUQmtiMlF4U2toUFYzQnJWbnBHYzFsdE5WTmtiVTV6WlVaT1lWWXhjSHBYYkdSUFRVZEdXRTlZVmxsU2EwcDJXVEJhTkZJeVJsaGxSM2hLWVcwNU5GUlhjSGRPTWs0MllucENUbVZ0T1hCUlZXaERZakpPUmxWdVdscE5NVm93VjJ4ak1VMUhTWHBUYlU1V1lsWmFkRmxyWkZkaGJWSklZa2hhYVdKSWFGSlpWV2hEV1RGS2RHSklUbUZWVlVweVdXcEtUMUV5U2toUFYzQm9aVlZyTTFaSGNEQmxhemx4VkZSV1VHRlZiRUpaTUdSdlpERktTRTlYY0d0V2VrWnpXVzAxVTJSdFRuTmxSazVoVmpGd2VsZHNaRTlOUjBaWVQxaFdXVkpyU25aWk1GbzBVakpHV0dWSGVFSlNNbWh2V1hwS2JtRlZPSHBVVkZwT1pXdHJNbE5YY0VaTk1XeFZZVWR3VDJKVlduSlVNRkpHVFVVNVJWUnRhRnBpVlZwdlYxY3hUMkV4Y0hSVWJXeFFVa2RTYzFSc1pFWk5NWEJGVTIxb1NtRnVValpVTW5CT1RsVTVjRk5WUm1wU01tZ3pWV3RqTldGdFVsaE5WM2hwWW14S01sa3llRFJWTVhCWVYyNU9ZVll3TkhkWlZtTTFaRlpvUjFGdE9XcFNibWhJV1Zaa05HSkZSa2hPVjJocFZqRldjRlI2VGs1T2F6RnhVVlJhU21KVk1ERlViRkphWlVac2RGTlVVbUZTTURWelZGVmtTMkZHY0VWVFdGWnFVakpvTTFOWGNEQmxhemx4VkZSV1VHRlZiRUpaTUdSdlpERktTRTlYY0d0V2VrWnpXVzAxVTJSdFRuTmxSazVoVmpGd2VsZHNaRTlOUjBaWVQxaFdXVkpyU25aWk1GbzBVakpHV0dWSGVFSlRSVXB2V2tWa2JtRlZPSHBVVkZwT1ZrVnNORlF5YkV0aFYxSllZa2hPWVZGNmJHOVpNR1J5WkVacmVWSnRjR2hTTVZZeVZGVmtZV0pHYkZWWGJXaE9Wa1UxY1ZSc1VrdGhWVFZJVlZSQ1QyVlVhRFZVYkZKT1RXczVTRmRZYkU5U01Hd3pWR3RTVjJGc2JGVmFla0pOWldzd01GZFdVbTVOYXpWVldqTmtUMUl4YXpCWGJURlRZV3hzY1ZkWVdrOVdSMUp4VjJ0U2NrNVZOWEZhTTJ4aFZrZDBObFF4VWtwTk1EVlVUMWN4V21Gc1JYbFVha3BIWVZVeGRGTlVUbHBXUld0M1ZGWlNjazB3ZDNsVVZGWlBWa1pzTkZkWE1VcE9SbkJJVkcxNFRsSXdjRzlYYTFKS1pGZE9TR0ZJWkVwaGJsSTJWREp3VW1WRk9YQlRWVVpxVWpKb00xVnJZelZoYlZKWVRWZDRhV0pzU2pKWk1uZzBWVEZ3V0ZkdVRtRldNRFIzV1Zaak5XUldhRWRSYlRscVVtNW9TRmxXWkRSaVJVWkpWRzVhYTFkRmNIRlhiRTVLVGpKT05tSjZVazlTUjAxNVZESnNTazlHUVhwUmJUbHFVVEJHVEZSSWJIWmFNVVY1VW0xd2FGSXhXbmxYYkdoeVRtdHNTRlJ0YUZwTmJXaHpWRVJPVDAxR2JGbFViVGxaVFd4S2MxZHRNVWROVjBwSlZWaGFZVko2YkhGYVJtTjRZa2RLZFZWdGFHdFNNbmd5V1cxNE5HRkhUa2hpUjA1cVVqSm9NMWRGWkVabFZUbFZVbGhrVDFaRlduSlVWRXBYWVZVNVJXSkhNV0ZoYkZZelYxWmtUMkV3TVZWYWVsWk9ZV3RLYzFkclpFdGlWVEZ4WVVkc1RXVlZSbmhVU0dSMlpHdDBjRkZzVm14WFJVcHpWREpzUTJGSFRuVlRiV2hzVlRCR2VGUklaSFprYTNSd1VXdGFiRk5GU25kWk1qRkhUVWRHV0U5WVZsQmhWVVkxVkZWU1JrNUZlRlZSVkVaTlZrVnJlbFpyVWtKbGF6bHhVMWhrVUdGcmJETlRNM0JDWkRBNWNWRllaRXBSTWpreVVUSmtkbE13VG5CVmJrNXBUV3RhY2xkc1pGSmFNVUpVVVdwQ2FtSnNXbk5VTTJSMllURndXV0ZJWkdoWFJYQnZXa1ZrYzJSdFNuQlJWR3hLVWtWVmVGUlhjR3BsYXpsVlVsaHNUbUZyUlROUk1tUjJZVEZ3U0ZKcVFscFZNRVUxVTFWa1IyVlhUblJTYWxaTVVUSnpNMUV5Wkhaa2EzUndVV3RTYUZJeWVIcFhhMDVEVmxkV1dWRnRlRkJoVlVveVYxY3hkMkpHYTNwVlYyUk1ZVlJvVEZOclpGTmhSMUpJVW0xS1MwMHdjSE5hUldoWFpWZEtjRnBIVWtwU1JFSnVXa1pqTVdWc2NGbFRia0phVmpOb2QxcFhNVlppTVd4MFVtNXdZVlpHYTNkWFJFcFRZa1pyZVU5WGRHRlZNbVIxVm10b2QyUnRWbkpOVkZwcFRXMTRjVlZxU205Tk1WWnlXWHBXYUdKV1NsbFVWbVEwWVZkS2MxTnFTbHBOYm1jd1ZsUkdkMWRHWkhWVWJVWlhUVVJTTTFkV1dtcE9WMUpYWVVWa1VtSlViSEZWYlRWdlUwWnNWMXBFVW1sU1YzaDRXV3BPYjFSdFJuVlJWRTVhVFROQ01sUlZWWGhPYlVsNVlrVktWRkpWY0RKWFZFSlhWVEpTYzJFemNGZGliRXBvVm01d1ZtUXhiSEZVYTNSYVRWWmFNRlp0TUhoaFZrbDRWMjVHWVZKWFVucGFSekZMWXpKV1IxSnRhRlJTVlhCeFZsY3dlR015VFhoalJrcFNZbGhTY0ZSWGN6RlNSbXh5V1hwV2FHSlZXVEZWTVZKclZsZEdkVlZxV2xWTmJrSlBWR3hWTldOR1RsWlNiWEJUVFcxbmVsWlhkR3BPVjBaMFZXeG9UbFl6YUhCWmJYaExUV3hyZVdWRVVsWk5XRUpaVmpJMVQxbFdXWGRPU0dSYVZtMU5NVnBHV205U01VWjBUMWR3VTJKdGFFbFhWbHByVGtkS1JsSnJhR2hTTW1oeFZGY3hhMk5HVWpaVWF6VlBZWHBGTWxVeFVtRlRiVVp5VGxoU1dHSlVSazlVVjNNeFRteFdkR1ZHUWxkU2JIQjRWa2MxZDFOdFZsZGlSbWhYVmtWd1lWbHNWbmRqYkZKeldrVmFiR0pIZHpKV01qRTBWMjFXYzFaVVFsVmlXRUpIVkZaV2MyTlhVa2xqUmtKb1lYcEJlRlpFU25OVGJFWllWR3RvYUZOSFVsUlZibkJ6WTFad1Ixa3phR2xTTUhBeFZsYzFZV0Z0U2tsaFJsSllZa2RTYUZsNlJuZFhSbEp4VVcxb1YyVnRkM2hXTUZaaFVUSkplVlJyWkd4U1YxSnZWbXBPYjJNeFJsWlpla1pvVWpCd1dWWnNaSE5WUlRCM1RVUktWVll6UWtOVWJYUnpaRVprZEdORk9XeGhNVmw2VmtaYWExTnRWbkpPVkZwaFpXdEtUMVZyVmt0a1JtUnpXa1pLYTFZd05VbFpWV2hyVTIxR2RWVnFXbFZOYmtKUFZHeFZOV05HVGxaU2JYQlRUVzFuZWxaWGRHcE9WMFowVld4b1RsWXphSEJaYlhoTFRXeHJlV1ZFVWxaTldFSlpWakkxVDFsV1dYZE9TR1JhVm0xTk1WcEdXbTlTTVVaMFQxZHdVMkp0YUVsWFZscHJUa2RLUmxKcmJGSmlWMmh5VldwS2EyTkdValpVYXpWUFlYcEdWbFV4YUc5VlIwWldZMGhDWVZKdFVucFpla1ozVWtVNVdHRkhjRk5OYmxGM1ZqRlNTMUl5Um5SU2EyaFhWMFp3VDFWcVJuZGpNV1JYVlcxR2FGSlVSbFpXUnpGM1ZERmFSbU5JUWxWaE1sSlRWRlZWTVU1Vk9VbGlSVGxYVWxSQ05WWkVRbXRYYlZaV1RsVm9WRmRIVWxCVmExcGhZMVprVjFWdE5VNVNXR2N5VmtaU1UxZHNXa2haTTJ4VllrWktkVnBFUVRGVFJtUlZWVzFHYVZacmNIaFdNV1IzVjIxU2NrNVdWbUZTTTBKb1ZXdGtlazFXVW5SalJ6VnNWbTVDVmxsVVRuZFZSbHBHWVROd1ZXSkZNREZaYTFVeFVsZEZlbU5GTlZOU1ZGWjRWakowVTFJeVJYaGpSbWhYVmtaYVlWcFhNVEJPUmxKRlUyMUdhR0Y2VlRKVmJHaHJWR3haZDJKRVdsVmlia0oxVkZWVmVGSldSblJOVjBaWFRWVlplRmRVUW10aU1sRjNZa2hHYTFOSVFsRlpWM2hIVGtaUmVXSkZjRkpXTURWSldWVm9hMVV4U2paaVNFWmhVbTFPTkZsclpFdGtWbFoxVjIxd2FWTkhhRlZXTW5ocldWZE5lR05HYUZWaGEwcHZWbTV3YzAxV1pFWlhhMDVwVFdzMVNGcFZWbXRoUmxsNllVaE9VbFpYYUZCYVJ6RlRWMVpPZEdOSFJsWk5SM042VjFST2QyUnJNVlpOVmxaaFpXeEtVVmxXVm5KT1JsWkZWR3RPYVUxck5VVlZWbFl3VkZkV1dFOVhOVlpXUlhCSVdWY3hSMU5HV25WVGJVWllVak5OZVZVeFZtdFVNa1pIWVROc2FGSXphRTVVVkVFd1pERmtWMkZGT1dsTlYyUTFWbGN4TkZsWFNsWlhXR2hhWVRKb1UxcEhlSGRUUlRsWVkwZDBWMlZyV25wWFZ6QXhWVEpHU0ZWcmFHbFRSbkJ3V1d0b2IySXhhM2RhU0U1YVRXczFTVmxWYUd0WFZrcEdVMjVTVlUxWFVtRmFWVlV3WlZaYVZWWnJOV2xXYkZZelZrWmtkMUZyTUhkT1ZXaFlZbGQ0VDFaclZrZE9SbEYzVld0MGFGSnVRbFpXTWpCNFdWWkplRk51U2xWV2JFcGhWR3RXTkU1V1JsbFNhekZyVFdwcmVWVjZTbk5STVZwWVZteHNVbUpZYUZGWlZsWkxZakZyZVU1VmRHaFNNVnBWVlZab1IxUlhVWGxQVkVwVVRXMTRSRlZ0TVZkVFZrWjFVVzF3YVZaV2JETlhWbHBxVGxkU1ZrOVlRbEpYUjNoUFZXdFdWazFHVWtkVmEwcE9WbGhvVmxVeFVrOVdNVXBHVW1wT1ZVMXVRbE5VVkVFMVkxWkdWVlZyZUd4aE1GbDZWa1JLZDFGdFVYZGlSVkpwVFRGd1JWZHFTVFZVUmtWNVlrWk9hazFyYkRWVmJURXdXVlpaZUZKdE5WWlNhelZFVkZWa1QyUldXblJsUmtKclRXcHNlVll5ZUc5aU1sRjVVbXhzVkdKWGFISlZha28wVFd4c2RHSkZTbEJXVjNoR1ZXeFNSMVJ0Um5SVWFscFZUVVpLUzFwRVFYaGpWbkEyV2tWU1lVMXFiSGxXTW5SclVqQXhSMkpHVWxKV1IzaExWV3BDWVU1V2EzbE5WV1JQVmxoU1JWbFljR3RTUm05NVQxUktWRTF0ZUVSVmEyUkhVMGRLU1ZSdFJsSk5SWEJYVjJ4YWIxRXlTa1pQV0VKU1lteHdZVmxzYUVOak1XUlZWR3hLWVUxSVVuZFVNRll3VXpGSmVGTnRPV0ZTVjFKSVYxZDBkbVZzVG5SbFIzUlVVbXh2TVZkWE1YTmhNWEJHWWtWV1RsSXlVbkpXYm5CWFRteGtjMkZGZEdwU2JYaFpXbFZvUTJKSFNsZFdibHBZVm5wR1NGcFhlSGRXVm1SVlVXeHNUbUpGY0hwV01WSktUbGRGZUdOR1VtRk5hbFpZVlRCb1EwMXNjRmhqTTJoUFlsVnNOVmxyWkhkVk1ERjBXak53VjFZelVuRlViR1JIWkVaV2MyRkZOVmROTW1oM1YxY3hORk13TVhOaE0yeHNVa1pLVjFSV2FFTlhWbGw1VGxVNVdsWnNiRE5VYTJoclYyeGFkRlJVUm1GU2JIQjJWV3BHUjJSRk9WaGpSazVwWWxkb1NsWXhXbUZoTURWSVUydGFhVk5GV25CVVZFcHZWREZzV0U1VlNrNU5WM1EyV1RCb1lWUnNTbFZTVkVwYVlXdHdlbFZYZUU5U2JFNTFWMnh3VGxKc2NGVlhhMlEwWTIxV2MxZHVWbFppVlZwWVdsZDRWMDB4WkZoalJUbFVUVmQwTkZadE5WTldNa3BWVW01Q1ZtRnJXbWhaTVZwM1VteHdTVlJ0ZEdsV1dFSTJWMnhXWVZJeVJrZFVhMXBVWWxoQ1YxbHNVa2RsYkd3MlVtNWtWbUpGV2pCYVJXUnpWRzFHTmxaclZsaFdNMUp4Vkd4a1IyUkdTbkZXYkZKWFVqRktWMWRXWXpGVk1EVnpWVmhzYWxKVVZsQldiRkp6WkRGVmVGWnJaR2hpUld3MVdWVlNUMVp0UlhsVVZFWmFWbnBHVkZZd1ZYaFhSMVpJWWtkc2FWSlhPVFZXTVZKTFRrVTFSMVpZYUdwU2JXaFpXVzF6TVdGR1duRlJWRUpyVFZkNFdGZFljRmRoTVZwMFlVVm9WbFo2UVRGWlYzaExaRmRHUm1GR2NGZGlWa1YzVjFkMFYxSXhUa2hTYTJob1VqTkNUMWxzWkZOa01WcEpZMFU1VldGNlZubFVWbEpoVmtaYVIyTkZkRnBpUmxwNVZGWmFhMVl4Y0VaWGJYaG9aV3RhVjFacVJtOWtNVkp6VjJ0b1ZWZEhlRlpXYm5CSFZERndXR1ZJVGs5aVIxSXdXbFZhZDFSdFJqWldibVJYVWpOb1ZGWlhNVmRqYXpGV1ZteFNWMUpXY0doV2JYUmhVekpPUjFwR1pHRlNWMUp2V1ZSS05HVkdjRVpoU0dSV1VqQmFlVlJWVWtkV1ZURjBaVVYwVmxadFVsQlZNR1JIVTFad1IxUnNUbXhpV0dnMFZqSjBZV0Z0VmtoVGEyaFVZbXhhVjFsdGVIZGpWbXh5WVVjNVYxSnRVbnBYYTJSSFlXc3hXVkZzYkZkU00wSkVXVlZhWVU1dFNrVlNiR2hUVm01Q1JWZFhjRXRVTVVsNVZtdGFZVkl5YUZoVVZFcHZaV3hXVjFadGNFNVdNRnBKVlRKNGIxWXhXWGxsUmtaVlZrVkdNMVJYZUZOV01WWjFVMnM1YUUxdVozZFdha2t4WXpGa2MxZHFXbE5pYXpWWlZXdFdkMVZHY0VobFNHUlVVbXh3V2xadE1XOVdSa3B5WWpOa1dGWXpVazlVVm1SU1pWWktjbUpHU2xkTmJtaFNWa1pTUW1Rd01YTlZiR3hxVTBWd1VGbFVTalJrVmxaWVRsZDBhRkpyTlVkVk1uUmhWMjFHY21OR1FsVldiVkpNVmpCYVlXUldXblJrUms1c1lsaGplRlpxUWxkWlZrMTVVMnRrYWxOR1NuTlZhazV2V1ZaU1ZWSnJkR3ROVjNoNFZURlNSMWRyTVZkWGEyeGFWbGRvY2xZeFdrdFdNazVKV2tad2FFMXNTbGhXVmxwclZERk9SMU51UmxKaVYyaFRWRlZrZW1Wc1pGVlVibVJyWVhwR2VWUnNXbGRoVlRGMFpVaEtXbUpHY0doVVZscHJZMnhzTmxadGVGZFhSMUV4Vm1wSk1WRXlSbGRVYTFwVFlXdHdhRlZyVm5ka2JIQklUVlZ3YkdKRldqRlpNRlY0VkdzeFJWWlVSbGROVjJoNVZHeGFhMU5HU25KaFJrSllVbTVDZUZaVVFsWmxSVEZ6VjJ4b1RsWnRVbk5aYkZaelRteGFkRTVZVGxoaGVrWjZWakp3WVZaV1NrWk9WMmhhVFVad00xWXhXbmRUVjA1R1RWVTFhVk5GUlhoV2FrWmhZVzFXU0ZOclpHRk5NbmhXV1cxNGQyRkdWbkZTYkdST1ZtMTRWMWxWV2s5aE1VbDNZMFZXVldKSGFISlpWVnBQVW14S2RWRnNWbXhoZWxaUVZrY3hlazFXU2xkVGJGWllZVE5DYUZSVlZuWmxiR1JYVm0wNVVrMVZjRmxWTVdoelZsZEdjbGR1UWxkaGExcG9WRlphZDFKc2JEWldiWGhYWWxkb1NWWlVTWGhPUm14WVUyeHNhRk5GTlZsV2ExVXhWa1pyZDFwRmNHeFdWRlpaVmtkNFlWVXdNWFJhTTNCWFRVWmFXRmRXWkU5VFJrNXlZVVprVjFaV2NIaFdSbVIzWTIxV1IyRXpiRTVXVkd4d1ZXeGtOR1ZHY0VaaFNHUldVakJhZVZsVVRuZFdWVEZIVTJ0T1ZXSllVbnBaTVdSVFRsVTVXR05HVGs1aVYyUTJWbFJHVjFSck5VaFViRnBwVWxad1YxbHRkRXRqVmxKVlVXdDBiR0pIVWxoWlZXaExXVlV4V0dWR1ZsWldla1l6V1ZaVmVHTXhUblZVYkZKWFZqRktUVmRZY0V0VGJWWlhWVzVXVkdFelFsUlVWbWhDWlZaa1ZWTnVUbEpOYTFwSlZUSjBiMkV3TVhSVmJXaGFZbGhTTTFscVJuTmpNWEJIV2tkNGFFMXVhRXBYVjNSdlZqRk9jMVJyWkZSaWJIQlpXV3RWTVZKR2NGaE5WazVVVW10d01Ga3daRzlpUmxwSFUyc3hWazFXV2xCVlYzaDJaREpLUmxWc1NsZE5iRXBNVmxaU1NrNVhTbk5XYkZwb1VtczFjbGxyYUVOVFZsRjNWVzFHVkdKRmNIcFZNalZoVjJ4YWRHRkZPVmhoYTNCUFdsWmtSMU5XWkhSa1JtUk9UVzFvTlZaVVJsZFpWa1Y0Vmxob1ZsZEhVbFZaVkVKM1ZURnNWVlJ0T1ZwV2F6VlhWMnRXTUdGV1NsaGxSV3hYVm5wV2FGbFdaRXRXTVZwMFRsWndhR0V5ZEROWGExWmhaREZPUjFkdVZsWmlTRUpZV2xkNFlXVldXa1pXYXpsU1RXc3hORmt3V25OV1YwWnlVMnRXV2xac1draFpiWGhQVm14U2NsTnRSazVTTTJoR1ZsWmFiMUl4VG5OVWEyaFdZbXMxVlZac1pGTmpiR3h5V2taT1UxSnJXbHBaYTFVeFZURktWbGR1VmxkTmFrRjRWWHBLUjFOR1RuTmhSbVJwWW10S1RGWlVRbUZUTURGelZHeGFhRkpWTlhOV2FrSnpUbFphU0UxVVVtaGhla0l6VkZaU1IxWkdXbFpPVkVwaFVqTlNlbFZzVlRWU1IxSkdWVzFvYVdKWGFEVldNVnBoWWpGa2MySXphR2hOTW5oelZXcEtiMk5XVWxWUldHUlBWbXMxV1ZSV1pFZGlSbHAwWlVac1ZWWnRVVEJXUmxwYVpEQTFWVk5zYUdoTmJFcFlWMnRXWVdOdFZsWlBWbXhYWWxoU1ZGUlZXbmROTVdSWVRVaG9WMDFzV2xkWmExWlhZVEpXVldKSVJsWmhhM0IyVkZSR1QxWnNjRWRhUjJocFZsWndTbFpFUW10aE1WSkhVbGhrVjJKcmNHRldiR1JUVTBad1dHVkhOV3hXYlZJeFdXdGFkMVl5Vm5KWGJuQllWa1UxZWxWWGRETmtNa3BHVlcxR1UwMHlhSGRXYWtKWFUyMVJlR05HWkZWaVdFSm9WRlZTYzJReFZsZFpla1pVVFd4YVdWcEZZekZXYkU1SVQwaGtXbFpzY0VSWmJURktaVlp3Um1OR1RsUlNNRFI1VmpGU1EyRXlTWGxWV0dScFVsZG9XVmx0ZUhkalZteHpWMjFHYVUxWFVsWlZNakF4V1ZVeFNWVnJWbGRXZWtJMFdWY3hTMVpzWkhGUmJHaHBVakpvVUZZeWNFZGpNV1JYVld4b1lWSllVbFJVVnpWVFpGWmFWbGRzU2s1U2JUa3pXVEJXYjFkSFNuUmxSMFpYWW01Q1NGbDZSazVsUmxaMVYyMUdUbFpWYTNsV1IzUlhUVVpPYzFKWVpGTmlWRlpWVm14YVNtVnNVa1ZUYXpsVVVqQmFTbGRyVm5kVmF6RldZMFJhV0Zac2NIRlVWbVJMVW0xS1JsWnJOVk5OYkVwTlZsZHdSMlF3TlZkYVJtUmFUVEpvY0ZWc2FHOVdiRkp6V1hwR1dsWnRVa2hWTW5NeFYyeGFkRlJZYUZwaE1WbDNWV3RrUjA1c2NFWmpSazVUVWpKU05WWldVa3RqTVVaellqTmthVkpXU2xOV2FrcFRVekZXY21GSE9XcGlSM2hZV1ZWYWQxbFZNVmhrUkZaaFZsZFNkbGxYYzNka01ERkZWbXhTVjJWcldtOVhiRnBoWXpGa1JrMVdhR3hTVkVaWVZGVlNWbVZXV1hsa1IzUlhZa2M1TkZWWGRGZFZSbVJJVlcwNVZrMUdXa2haYlhocll6RndSazlYYkU1aE1qaDRWbFphYWs1V1RYaFRXR3hyVW5wV1YxVnRlRWROTVdSeFVWaG9VMUpyV2xwVlYzUjNWVEZLU0dGSVZsWk5ia0pNVldwS1IyUkdWbkpoUjJ4VFVsaENiMVpzVWt0VU1rcHpWVmhzYVZKVmNIQlpWRTVDVFZaV1YxUlVWbFpXTUZwWFdXdGpNVmRzV25SVmJFNVZUVlphZWxwRldtdGtWMHBIWTBaa2JHRXhjRFpXYTFaaFlURlJlVlZ1VG1wU1YyaFlWakJhUzFWc1ZuSlZiazVPVFZkNFYxbFZWa3RaVlRGWlVXeHNWMUo2UVRGWlZtUlhWbXhLZFZOc2NGZGhlbFpFVmtWU1IxRXlUa2RVYkZKclVsWktiMVpzVm1Ga1ZsVjRWbXM1VW1KSE9UTlphMVpUVld4WmVWVnNTbFpoYTFwTVdrUkdkMU5IU2taVWJXaHBWbGhDU2xaWE1ERmtNa1owVm01R1VtSnJTbGxaYkZKWFZFWnNWbHBGZEZoU2JIQmFWbGN4UjJGV1dYcGhSRnBYVFc1b1VGVXlkSHBrTVZKMVVXeEtWMDFzU2t4V1ZsSkRVakpLYzFSc1dsVmhNSEJvVkZWa05GSldWbGRWYlRsV1ZsUkNNMVV5TldGWGF6RkdUbFZPV2xaRldqTmFSV1JMVTFaU2RGSnNaR2hOU0VJeVZqSjBWMkV5U25OaU0yaFNZa1pLVTFacVRsTmhSbXgwWkVoa2FVMVhlSHBYYTFwaFlURktjbE5xUWxoaE1sRXdXVlJHUzFZeVRrbGFSbkJvVFd4S1dGZFhjRU5OUmxwWVZGaHNZVkpyV25OWlYzaExWRlpWZUZack9WSmlSemt6V1d0V1UxVnNXWGxWYTNSV1ZrVktTRmx0ZUU5V2JGWnhWR3N4VG1GNlZrcFhWbFp2WVRGT2MxTlliR3hUUmtwVlZteFZNV1JXYkZWU2JtUnJVakJ3U2xaSE1VZFdNa1YzWTBoYVdHRXhXbkpaYlhoMlpESk9TVkZzYUZkTmJFcE5WbGR3UjFsWFRuTmlSbVJvVW1zMWNsbHNWVEZsVm14V1lVaE9XbFpzYkRSWmEyTXhWbXhLY2s1VlRscFdSWEJJVlRCYVMyUldXblJTYkU1T1RXMW9ObFl4VWt0amJWRjNZek5vYVUweWVGaFpWM1JMVmtaYWNWSnJkR3ROV0VKSFYxaHdWMkpHV25KT1ZYQldUV3BGTUZkV1pFZFhSbkJKVTJ4b2FWWkZXalpYV0hCSFpERlplRkp1VW1oU00xSlVWRmN4VTA1c1ZYaFdhemxwVFdzMVNWVXlOVmRXYkdSR1UydDBWbFpGV2t4YVYzaHpWakZzTmxKdGJGTlhSa3BXVjFab2QxbFdUbk5UYTFaaFRUQndVMVJYTVRSUk1XUnhVVzVPVTFKcldsbFhhMVozVldzeFJsZHVWbFpOVmxwUVZWZDRkbVF5U2taWGJFSllVakZLYjFadE5YZFZhekZ6VWxoc2FWSlZjR2hVVldRMFVsWldWMXBIZEZSaVJWWXpWVzB3TVZaR1dsWk9WVTVZWVd0S2VsVnNaRmRUUjBaR1kwWk9UbUpYWTNoV2FrbzBZVEZrY2s5V1dtbFRSVnB5V2xaU2MyTldWbkZUYlRsT1RWVTFWMWRyV210aFIwcFdWMnRzVlUxSFVuSlZla1pLWlVaa2RWTnNjRmRpVjJoVlYydGplRlF5VG5SU2EyeHBVakJhV0ZSV1pEUmtWbHBXWVVoYVRsSXdXbGRaYTFadlZsZEtjazVYUmxkTlJsVjRWRzE0VjFJeFVuSmtSMnhUWW10S1NsZFhkRk5STWtaV1RVaGthVkpGU21GWlZFcFRaV3h3UjFwRlpFOVdhelZXV1ZWYVIxUnJNVVpqUkVwWVZrVktVRlZVU2t0U01rVjZZa2RvVkZKdVFreFdWbEpMWVRKT2MySkdXbUZTVjFKeVZtMDFRMU5XY0ZaYVJGSm9ZbFZhVmxWV2FFdFhSMFp5WTBab1ZWWldjRXhXTUZwWFpGWkdkR1JHVG14aVdHTjRWbXhhWVdFeVVYbFNhMmhYWVRGS2FGUlhOVk5oUm14eldrUlNiR0pIVW5wV01uUlBZVVpKZUZOcmJGaGhhelZRVlRKNFJtVlhSa2xhUm5CcFZrWmFWRmRVUWxkak1VcEhWbTVXVldKWGFGaGFWM2hoWld4V05sSnJPVkpoTTJReldXdFdVMWRyTVhSVmJXaFdZV3RLWVZwRVJtdFdNVkpaWVVkb1UwMUdiM2RXVnpGM1ZURk5lVlpzV2xOV1JYQlZWbXhWTVdOV2JIUmtSRUpYVW10YVZWUXhXa2RoUjBaelUyc3hWazFXV2xCVlYzaDJaREpLUmxWc1NsZE5iRXBNVmxaU1ExSXlTbk5VYkZwVllUQndhRlJWWkRSU1ZsWlhWVzA1YUdGNlFqUlZNbkJYVjIxR2NtRXphRnBpV0doRVdURmtVMDVWT1ZoalJrNU9ZbGRrTmxaVVJsZGhNVmw1VW01U1UyRXlhRkZWYWtwVFZFWlZkMWRyZEU1TlYzaDVWa1pvYTFSRk1WaGxSRVpXVFdwRk1GWXllRnBsYkZaelVteHdhVmRHU2xWWFYzUnJVekZPU0ZOcmJGWmlWMmhaVlcxMGQyVnNaRlZUYms1cFlsVndlVnBWVWxkWGF6QjNUbFYwVmxaRldrdGFSRVp5WkRGd1JWUnRkRk5oTUc5M1ZtMHdNV1F4WkhKTldFcFlZV3MxV1ZsclZURmtWbXhWVW01a2ExSXdjRXBXUnpGSFZqSkZkMk5JV2xoaE1WcHlXVzE0ZG1WR1JuRlhiV3hPWWxaS1RWZHNZekZoTWs1WFkwVmtXbVZyV25GWmJGWjNUVVpSZUZWck9XaFdNRnA0VmxjMVYxWkZNVlpPV0d4WVlXdGFSRlJ0Y3pGU1YwWkdUVlUxVGxKR1NYcFdNVkpLWkRBMVdGVnNaR3BTUm5CUVZXeG9VMU14VmxWUmEyUnBZa1UxVjFaSGRFdFpWVEZJWlVWV1ZsWnRVbkpWTW5oR1pERktkRTVXV2xOV1ZFRjRWMVpXWVZFeVNuUlRXR3hoVWxoQ1UxUlZWbUZrVmxWNFZtczVVbUpIT1ROWmExWlRWV3haZVZWc1NsWmhNVXA2VkZSR2MxWnRSa1pUYlVaT1YwVktXbGRzVm05a01XeFhWMnRvVUZaNlZsZFZNR00wWkRGV05sRnVUbE5TYTFwWlYydFdkMVZyTVVaWGJsWldUVlphVUZWWGVIWmtNa3BHVld4S1YwMXNTbE5XVkVKV1RVZFJlR0V6YkU1U1JscHlWbTAxUWsxc1VuSlZiVGxXVmxSQ00xVXlOV0ZYYXpGR1RsVlNXbUV4Y0hsYVZtUkhVMVprY21OR1NrNVdWM2Q2VmpGU1EyRXdNSGxWYTJSU1lteEtWVmx0TVRSaFJscHhVVzFHYkZac2NFWlZNVkpIVlRGYWRWRnNiR0ZXVjJoRVdWWmFXbVZYVVhwYVJtaHBVakpvVEZkWGNFTmtNRFZXVDFWb1QxWlVSbE5VVlZaaFpWWmtjbFp0T1ZKTmF6RXpXbFZhVjFReFdYcGhTRVpWVmpOTmVGbHFSbkprTVhCSFYyMXNUbE5GU2twV2Fra3hVVEpHVjFOWWFGaGlSWEJaVm0weGIxWkdiSEZSYms1VFZsUnNSbFl5ZEhkVmF6RnlUVVJDVmsxV1NsQldha3BUVjBaS1dXSkZPVmhTYmtKNVZrWmtkMVZ0VG5OVWJsWnBVMFZ3Y1ZWc1pEUlNiRkYzVkdwQ1ZsWnJXVEpaYTFKaFdWWktXR0ZGZUdGU2VrWk1Xa1ZhYzA1WFVrWlZiV2hYVmxad01WWlVSbGRVTVVaellqTmthVkpXU2xOV2FrcFRVekZXVlZGcldrOVNiRnBHVmtkMFQyRlZNWEpPVlZaV1ZucEZNRmxXWkV0V01VNTFXa1pvYVZZemFFUldSVkpIVVRKS2RGTlliR0ZTV0VKVFZGVldZV1JXVlhoV2F6bFNZa2M1TTFsclZsZGhNREI0WTBkb1ZtRnJiM3BhVmxwWFUwWndTVmR0Ums1U00yaEdWbFphYTJFeFRuTlNXR1JUWWxSV1ZWWnNXa3BsYkZKRlUyczVWRkl3V2twWGExWlRZVVphVmxkdVZsWk5WbHBRVlZkNGRtUXlTa1pWYkVwWFRXeEtURlpXVWtOU01ERnpWV3RzYVZKVk5WUldha0oyVFZaV1dFNVdaR2hXVkVJMFZUSTFZVmRzV25SVVdHaGFZbGhTZWxVd1pFdFRSVEZXWTBaU1UyRXpRWGxXYWtvMFlqRk5lVk5yV21sTk0wSldWbXBLVTJOR2JITlZiVGxwWWtkNGVWZHJhRTloTVZwMVVXeFdWbFl6UWtSWlZtUlhWbXhPV1dOR2NHaGhlbFpOVjFSS01HTXhUa1pQVm1oT1ZqQmFhRlJYY0hOa1ZsVjRWbXM1VW1KSE9UTlphMVpUVld4WmVWVnJkRlpXUlVwSVdXMTRjMVl4Y0VkalIwWk9VMFpLUmxac1l6RlVNa1pIVjJwYVYySnJOVlZXYkZVeFVqRlJlRmRyVGxkU2Exb3hWbTB4TUZZd01IbGhSRnBXWld0YVZGcEhlRTVrTVZKMVVXeEtWMDFzU2t4V1ZsSkRVakpLYzFSc1dsVmhNSEJvVkZWa05GSldWbGRoUjBaVlZqRmFWMVV4YUd0WGJGcFlWV3hrV0dGclNqTlZNR1JYVTFaR2RHSkhiRmRpUm5BeFZqRmFZV0l4VW5OaU0yUk9WbXhLVDFZd1ZrdGpSbXh6VjJ0MGFrMVlRbGRYYTFwcllVVXhTV0ZGVmxaV00wSlFWMVphVm1ReFRuRlNiR2hYWWxaS1RGWXljRU5PUmxwWFUyeG9ZVkl6VWs5WmJHUnZaV3hrVlZOWWFGZGlSemsxVlRJMVUxWXlTbGxoUjJoV1lXdGFhRmt5ZUU5V2JVWkhWRzEwYUUxdWFFcFdWekI0WkRGa2NrMVlSbWhOTW1oaFdXeFNWMVV4WkhGU2JtUnJVbFJzV2xsclZuZFdSa3B5WTBSS1dGWnNjSFpXUjNoT1pESktSbFZzU2xkTmJFcE1WbFpTUTFJeVNuTlViRnBWWVRCd2FGUlZaRFJTVmxwWVRsaE9XR0pHYnpKV2JUVlhWMGRLUms1VlRsVk5WbHA2Vld0YVYyUkZNVmhqUjJ4WFZtMDVNMVpxU2pSVWJWRjNZek5vYVUweWVGaFpWM1JMVmtac2MxcEVVbXhpUjFKNlZtMXdVMkZzU1hkalJFSlhZbFJXTTFaRldrWmxSazUxWTBad1YySlZNVFJYVjNSWFl6RktSazFWYUdGU1ZGWnZXVlJDWVU1c1ZYaFdiRTVXWWxaR00xcEZXbGRoYXpGSlZXdFdXbFpzV2toWmJYaFBWbXhTY2xOdFJrNVNNMmhHVmxaYWEyRXhUbk5TV0dSVFlXdHdWbFV3WkRSU1JteDBaVWhrV0Zac1dubFhhMlJ2VmpBd2VXRkljRmRoTVZweVdYcEtVMVl5VGtkaVJsWlhUV3hLYUZaR1pEQlpWVEZYVkd4YWFGSllVbkJWYWtaTFUyeGFkRTVZVG1oV01GcFhWVEp3UjFsV1NuUlZWRUphWld0S2VsVXdaRXRUUlRGV1kwWlNVMkV6UVhsV2FrbzBZakZOZVZOcldtbFNWMmh3VlRCb1ExTXhWblZqUm1ST1lrVTFWMWxWVlRWaE1rcFhVMnh3VmsxcVJqTlhWbHBXWkRGT2RWSnNjR2hoTTBKVlYxZDBWMVF5VGtkU2JHaGhVbGhDVTFSVlZtRmtWbFY0Vm1zNVVtSkhPVE5aYTFaVFZXMUtjbE50YUZwV2JGcElXa2Q0VDJOdFJrWmtSMmhUVFVoQmQxWXlkR3RPUmxKSFYydG9VRlpZYUZWV2JGVXhVVEZrY1ZGdVRsTlNhMXBaVjJ0V2QxVnJNVVpYYmxaV1RWWmFVRlZYZUhaa01rNUdZa1pTYVZZeWFIZFhWM2hyVlRKTmVGUnNXbFpYUjFKb1ZGWmtORmRzVlhsT1dFNVlZa2RTU1ZwVlkzaFhiVXBJVld0b1lWSkZTWGRWTUZwclkxWktkR0pIYkZkV1JrbDZWakZhWVdGck5WaFZiRnBwVWxaS2FGUlhOVk5qUmxaeFUycFNUbFp0VW5wV1J6VkxXVlV4YzFkVVJsWldlbFo2VjFaYWExSXhUbGxoUm5CT1lXdEdNMVl5Y0Vka01XUkdUVlpzWVZJelVsVlZhazVUVFd4VmVXUkhkRTlTTURWSlZUSTFVMVl4WkVaVGEzUldZVEZLZGxsdGVFOWtWMHBHVTIxc2FFMXVhRWRYVjNCTFlURk5lRk5ZY0doVFIxSmhXV3hTUjFZeFVuRlRiVVpYVWpGR05WZHJWakJXUmtwWlVXNWFXRlo2UWpSWlZFcExVbTFTUjFadGNFNVRSa3BNVmxaU1ExSXlTbk5VYkZwVllUQndhRlJWWkRSU1ZsWlhXa2QwVkdKRlZqTlZiVEF4VmtkRmVXRkdRbFZXVm5CNlZqRmFUMk5XUm5KalJrNVRVbFZ3TVZZeFdsTlRNVmwzVGxaYWExSldTbGRaYlRFMFdWWmFkV05HWkd0V2JWSjZWa2MxUzFsVk1VbFZWRVpXVm0xb2RsWlZaRkpsVlRsWVRsWlNWMVpVVmtSV01uQkRZekZLUjFKc2FHRlNXRUpUVkZWV1lXUldWWGhXYXpsU1lsVldORmxVVG5OVlJsbDZWVzFvVjFaRlNraFpiWGhYVWpGU2NsUnRjRmROUjNjeFYxZDBiMVl4VWtkU1dHUnFVak5DWVZsc1pEUlRNV3cyVVc1T1UxSnNXakZaYTFwM1ZqSldjMWRxUmxkTmJtaFFXVEp6TUdReFVuVlJiRXBYVFd4S1RGWldVa05TTWtwelZHeGFWV0V3Y0doVVZsWktUV3hTY2xacVFsUmlSVll6Vlcwd01WWkdXbFpPVlU1WVlXdEtlbFZyV2tkWFJuQkdZMFpLVGxKV2NERldiRlpYWWpGRmVWWnNaR3BTYkVwVFdXMTBTMkZHVm5KVmEwNXFVbTFTTUZSc1ZqQmhSa2wzWTBac1YySkhhRlJXTW5ONFkxZEtTVk5zYUdsU1ZFVXdWMWh3UzFJeFpFWk9WbWhzVWpKNGNGbHJXblprTVdSVlZHNUthMDFFYkVoVlYzQmhWR3hKZWxWdE9WZGhNVXAxV1RKNFQxZEhTa1pVYldocFZsaENTbFpYTURGa01rWjBWbTVHVW1KclNsbFdhMVp5VFZac1ZWSnVaRmRTVkVaWldXdGtjMVV5Vm5SbFNHaFlWbTFvZWxWVVNrNWxWa3B6WVVVNVYwMHlhSGRYVnpFMFdWVXhSMkV6Y0dwVFJuQlJWVzEwUjA1c1ZsaE5SRlpvWWtWV00xVXlOVTlYUmxwR1kwaGFZVkl6VW5wVmExcFhaRmRPU0dSR1RrNVNiVGg0VmpKMFYxUXhSbkprTTJoU1ltdEtWVlpVVGxOVmJGWnlWVzVPVGsxWGVGZFpWVlpMV1ZVeFdWRnNiRmRTZWtFeFdWWmtWMVpzU25WVGJVWlRWakpvUlZkWWNFTk9SbHBXVGxab2JGSXpRazlaV0hCWFpHeGtWVkZ0ZEZkaVZXd3pXVEJXYjFaWFNuTmpSMmhXWVd0YVdGcEVSazlXYkZaVlZXdDRUbFpWY0VaV1JFWnZZVEpHZEZOc1pGZFhSWEJUVkZjeFUwMXNaSEZSYms1VFVtdGFXVmRyVm5kVmF6RkdWMjVXVmsxV1dsQlZWM2gyWlVaR2NsWnNRbGhTTVVwMlZsUkNWMUl5U25OYVNFNWFaV3RhYjFSWGRHRlhWbGw0V2tkMFZsWXhXbmhXVjNRMFZrWmFWazVWVGxoaGEwcDZWV3RhUjFkR2NFWmpSa3BPVWxaVmQxWnNWbE5VTVVWNVUxaHNWV0V4U2xOWmJHaHZZMFpzYzFkcmRHdE5WMUl3V1d0V1MxUlZNVlpUYmxaYVlXdEpkMVV5ZUVaa01VcDBUbFpTVjFaVVZrUldNbkJEWXpGS1IxSnNWbWhTYTFwUFZGVldkMDFzWkZWUmF6bFNZbFZXTkZrd2FGZFdSMHBZWVVoQ1YyRnJXbWhWVkVaeVpWVXhXR1JIZUdoTmJtaEhWa1pXYTJFeFRYaFVhMlJVWVdzMVlWbFVRWGhOTVU0MlVtNWtWRlpzY0RGV1Z6RjNWVEZhVjJKNlJsZE5ia0pRVmtjeFNtUXlUa1poUm1ocFlsaG9hRlp0TlhkU01rMTRWRmhvVm1KdVFtaFVWbFpLVFd4U2NsWnFRbFJpUlZZelZXMHdNVlpHV2xaT1ZVNVlZV3RLZWxWcldrZFdWMFpIVW1zMVRsSllRWGxXTVZKRFZERkZlVlJyWkdwVFJVcFRWbTV3YzFSR1ZuRlNibVJQVm0xU1dGZFVUbTloVmtweVYyeHdWazFxUVhoWlZ6RlhWMGRPTmxOc1VsZFdhMVYzVlROd1ExUXlUa2RTYkdoaFVsaENVMVJWVm1Ga1ZsVjRWbXM1VW1KSE9UTlphMVpUVld4YVNHRkhhRlpoYTI5NldsWmFUMVpzY0VaUFYzQk9Wak5vWVZacll6RmtNVlpYVmxoa2FsTkdTbUZVVjNCSFUwWndSbGR1WkZkU1ZFWlpWRlprYjFZd01IbGhTSEJXVFZkU01sUlZXazVrTWtwR1ZXeEtWMDFzU2t4V1ZsSkRVakpLYzFSc1dsVmhNSEJvVkZWa05GSldWbGRhUjNSVVlrVldNMVV5ZEU5WGF6RnhVbTVLVlZadFVreFdNRnBoWkZaYWRHUkdVbE5XUlZwT1ZsUkdWMVF4Um5OaU0yUnBVbFpLVTFacVNsTlRNVlpWVVd0a2FXSkZOVmRXVjNCUFlUSktTVkZyYkZwaE1VcE1WbFphZG1WVk9WaE9WbEpYVmxSV1JGWXljRU5qTVVwSFVteG9ZVkpZUWxOVVZWWmhaRlphVmxadGRGWk5helZKVmxjMVExVnRTbkpUYldoV1lURktSRmt3V210a1JUVldaRWRvVTAxSVFscFdiWGh2VlRGa2NrMVlSbWxUUlhCWldXdFZlRTVHYkZaYVJUbHJVbTVDU2xrd1ZYaFdNVTVJVkdwS1YxWldjRkJXVkVwUFVqRkdjVmRyT1ZOTmJtaE1WbGR3UWsxWFZuTmFSbVJvVWxSc2MxbHJWa3RXVmxWNVRWaGthRlpVUm5wVk1qVlBWbFpLZEZWcmVGcGxhM0JMV2xaYVUyUldUbkpqUms1T1YwVkZlRlpxUm1GaGJWWklVMnRhYkZKdGFGUlpiVEUwWVVaU1ZWRllhR3BTYkZwSlYydG9ZVmxWTVVobFJWWldWbTFTY2xVeWVFWmtNVXAwVGxaU1YxWlVWa1JXTW5CRFl6RktSMUpzYUdGU1dFSlVWVEJrVDAxc1pGVlJiWFJwVFd4R00xbHJWbTlXTWtwWlVXMDVWbUp1UW5aWmJYaFBZMnh3U0ZKdGVGZGlXR2hhVmtaYWEwNUdWbk5hUlZwcVUwWmFZVlJVVGtOT2JHUnhVbXRPVDJGNlZrZGFSVlozVldzeFJsZHVWbFpOVmxwUVZWZDRkbVF5U2taVmJFcFhUV3hLVEZaWGRHOWhNREZ6V2toS1lWTkZOVTlaYTFaTFpGWnNjVk50ZEZSaVJWWXpWVzB3TVZaR1dsWk9WVTVZWVd0S2VsVnNaRk5PVlRsWVkwWk9UbUpYWkRaV1ZFWlhZVEZaZVZWc1pHcFNWMmh3Vlc1d1IxTXhWbkpWYlRWcVlrVldOVmRyYUdGWlZURklaVVZXVmxadFVuSlZNbmhHWkRGS2RFNVdVbGRXYTJ3MlZrVlNTMVF4VGtoU2EyeGhVbFpLYjFac1ZtRmtWbFY0Vm1zNVVtSkhPVE5aYTFaVFZXeFplVlZyZEZaV1JVcElWRmQ0VTFOWFNrWlViRXBwVmxSV1MxWldZM2hPUjBaWVUyeGtVMkpVVmxsV2ExWnlUVlp3UmxwRmRGaFNiSEF4Vm0weE1GWkdTbFZTYmxaWFRXcENNMVJzWkZkV2JVcEdZa1phYVZaSGVIWldha0pXWlVkS2MxcElVazlXV0ZKdlZXcENkMWRXV25OV2FrSlVZa1ZXTTFWdE1ERldSbHBXVGxWT1dHRnJTbnBWYTFwSFYwWndSbU5HU2s1V1dFSTBWakZrZDFOdFZraFZhMlJxVW0xb1VGWnJWa3RqVm5CWFZtdGFUMVpyTlZkV1IzaFBZVlpaZDA1VVFsWmlWRlpVVjFaYVYwNXNSbGxUYkdob1lUTkNXVlpHVm1GU2JWWldUMVpzVm1KWGVGaFVWbHAyWlVaa2NsWnRPVlZpVld3eldrVmFWMkZyTVVsVmEzUldWa1ZLU0ZsdGVFOVdiRkp5VTIxR1RsSXphRVpXVmxwT1RsWldWMkl6YkZCV2VsWlZWbXhWTVZFeFpIRlJiazVUVW10YVdWZHJWbmRWTVU1SVlVaHNXRlpzY0haV01uaDJaVWRGZW1KSGVGTk5iV2g0VmtaU1FtUXdOVmRVYkdoT1ZqQmFjMVp0TVRSWFZsSlhXa1JTVlZac2JETlViRkpMVjIxS1NGUnFVbHBoTWxKTVdrWmFWMlJYVGtaalJrNVVVakEwZVZZeFVrTmhNa2w1VlZoa2FWSlhhRmhaYkdoRFlqRldkV05IT1dsaVIxSjZWMVJPYjJFd01YTlRhM0JhVmtWck1WVjZSa3BrTURWVlUyeHdhVkl3TkRCWFYzUnJVekpTVjFadVZtcFNXR2hYVkZWV1YwMXNWWGhXYXpsb1RXdHdTVlV5ZUhOVmJVWnlVMjVPVjFaRmNGQlpiWGhTWlZkS1JsTnRiR2hOTUVWNFZsWmFUazVXVmxoU2JGcG9UVEJ3VTFSWE1UUlJNV1J4VVc1T1UxSnJXbGxYYTFaM1ZXc3hSbGR1VmxaTlZscFFWVmR6TlZJeFJsbGpSa3BwVmtkNGVGWldVa05UTWxKSFlraEdWV0V6VW5CVmJURTBWMVphU0UxRVZsUmlSVlkxVjJ0b1MxZEdXa1poZWtaaFVsZFNURll3V21Ga1ZscDBaRVpTVTFaRldqRldha1poWWpGU2MySXpaR3BTVjJoV1dXMTRkMk5HV25WalJXUnFUVmQ0TUZSc1drOVdWVEZ5WW5wR1ZsWnNTbnBXVm1SSFZteEtkVk5zYUZkU1YzTjRWMnRXYTFNeFpFZFhibFpYWWxoU1UxUlhOVTVsVmxWNFZteEtUMUpZVGpOV1J6VkRWV3haZVZWcmRGWldSVXBJV1cxNFQxWnNVbkpUYlVaT1VqTm9SbFpXV210aE1VNXpVMnRzV2sweGNHRlVWV1JUWkd4d1JWRnVUbFJTYkhCNFZsY3hNRlpHU2xsUmJscFhUVlpLVUZaWE1VcGtNazVHWVVaV2FXSklRbmRXYlRWM1VqSk5lR0pJVWs5V2EzQnhWV3hrTkZKc1VYZFVha0pUVWpCYVYxVnRNREZXUmxwV1RsVk9XR0ZyU25wVmExcEhWMFp3Um1OR1NrNVNWbkF4VmxSR1YxVXdOVWhTV0d4VFlrZDRXVlpxU2xOWlZsSllUbGM1YVUxWGR6SldSM014VlVaYVdHVkVRbGROYWxaNlZqSjRZVTVzU25WVWJGWlRZbFpLVVZkclkzaFRNV1JHVFZab2JGSXllSEJaYTFaaFpERlZlRlp0ZEdwTmExWTBWVmQ0VTFaSFNsbFJia0pWVmpOQ1NGUlZXbXRqTVd3MlVtczFVMWRIYUZkWGEyaHlUbGRHYzFOWWJHaFNSVFZWVm14a1UxZEdiRmhOVldSVVVsUnNTVmRyVmpCVk1ERjFWVzVXVjFKWFVucFZWekZMWTIxV1IxVnNjRTVpVmtwUFYxWmFWMUl5VG5OYVJsWlVWa1phY2xWcVFuZFhWbHAwVGxaa2FFMVZjRlpXYlhCTFZrWmFWMUpVUWxSbGEwcDZXVEZWTVZKdFVrWmpSa3BPVWxad01WWlVSbGRVTVVaellqTmthVkpXU2xOV2FrcFRVekZXVlZGclpHbGlSVFZYVmtkMFMxVkdTWGROVkZwV1ZucEdkbGxXWkVkV2JFNTFVbXh3YUUxc1NrbFhiR040VkRBMWNrMVZhR2xTTUZwd1dWUk9RMlJzWkZobFIzUlhZbFpLU0ZsVVRuTlZSbVJIVTI1Q1YyRnJXbWhVVmxwM1VteFNXV0ZIYUdsV1YzY3hWa2Q0VTFFeGJGZGFSV2hoVFRKU1ZWWnFTVFJrTVZGM1YydEtiR0pGV2pCVU1XUjNWV3N4Um1OSWNGZE5Wa3BNV1dwS1UyTnRTa1pWYkZwb1lUQndlRlpYY0U5aE1ERkhWbXRvVGxadFVuTlphMlF3VGxaV2RFNVhkRnBXYkZZMVYydG9TMWRHV2taaGVrWmhVbTFTVkZVd1dtRmpWbFowWkVaS1RtSnNTakZXYkZadlpHc3hSazlWV210Tk0wSldXVzB4VTFsV1duVmpSa3BxWWtWV05WbHJWa3RaVlRGSVpVVldWbFp0VW5KVk1uaEdaREZLZEU1V1VsZFdWRlpFVmpKd1EyTXhTa2RTYkdoaFVtdGFWRlZyWkRObGJHUlhWbTA1VW1KSE9UUlpNRnB2VmxkS1ZXSklRbUZXYkZwSVdUSjRkMUp0UmtaVWJYQk9VMGRvVjFaSGVHdE9SMFp5VFZoS1QxWjZiR0ZVVldSVFYwWldWVk5zVGxoV2JGcDZWVzB4ZDJGV1duTmlla3BYVFc1b2RsVjZRWGhqTWs1SFdrWmthV0pZYUhaV2FrSldaVWRTYzFSdVNtRlNWR3h5V1d4V2QxZFdVbGRhUkZKb1ZqQndlbFZ0Tld0V1JscFhVbFJDVkdWclNsQlpNRnBIVjBad1JtTkdTazVTVm5BeFZsUkdWMVF4Um5OaU0yUnBVbFpLVTFacVNsTlRNVlp5WVVkMFRtSkhVbmxYYTJoUFZHMUtSbE51VmxwaGEzQnlWVEo0Um1ReFNuUk9WbEpYVmxSV1JGWXljRU5qTVVwSFVteG9ZVkpyV2xSVmEyUXpaV3hrVjFadE9WSmlSemswV1RCYWIxUXhXWHBWYldoYVlrWktlbFJzV210ak1YQkdXa2RvYVZaV2NFWldWbHBPVGxaV1YySXpiRkJXZWxaVlZteFZNVkV4WkhGUmJrNVRVbXRhV1ZkclZuZFZNVTVJVlZoc1YwMXVVbkpaZWtGNFl6RkdkRTVYYkU1VFJrcE1WbFpTUTFJeVNuTlViRnBWWVRCd2FGUldWa3RTVmxGNFdrUkNhRkp0VWtoWlZFNUxWV3N4ZEdWRlRsaGhhMXBFVld4Vk5WZFdjRWhoUmxKVFZsWndNVlpxU2pSaGF6RllVbGhvYWxOR1NsRldNR1EwWVVaYWNWRnRSbXBXYlhoWFZrZDBTMVJWTVZaVGJsWmFZbTVDZGxaR1ZYaGpNVTUxV2tkR1UwMXFhRE5XV0hCRFl6Sk9XRlZyYkdwU2EwcHZXV3RXVjA1R1drVlRiazVVWWtWYVdWWkhkRzloUms1SVZXeFNWbUp1UW5wWk1WcDNVakZyZW1GSGJGTk5TRUY0Vm14ak1WbFhSblJUYTJ4b1VteEtXVmxyWkZOaFJtdzJVbTVrV0ZKc1NuaFZWekZ2VmpKV2RHUXphRmROUmxwb1ZWUktTbVZXVW5KYVIzaFRWakZLZGxadGNFOWlNazE0VW14YVdtVnJXbTlWYWtKM1YxWmFkRTVZWkdoaVJXd3pWakkxUjFkSFNraGhSVGxhVm14Vk1GcFdXa3RXVm1SeVRsWk9WRkpWVmpaV01qRTBZakZTY2s1WVNrOVdWbHBXVm10YWQxTXhaSEZSYTNST1RWZDRWMWxWVms5Vk1WbDNZa1JXVjFJelFraFpWbHBhWlVaa2NWSnRSbE5XTURCNFYyeGFZV0l4U1hoVWJsSnNVakJhY0ZZd1pHOWxiRmw0VldzNVZrMXJOVWxWTVdoelZERlpkMDVXWkZaaGEzQjJWRlJHYTFKc1duUlNiWEJUVFVoQ1NsWnRlRmRTTWtaSFYycGFWMkpyV21GWlZFcHZWMFpzVlZKdVpGaFdiRXBaV1d0YVExUnRSWGhXV0d4WFVteGFWRnBFUVRCbFZtUnpZa1pXVjFKdVFsRldWM1JoVW1zeGMxUnNhR0ZTVlRWeVZGZDBZVk5zVmxoa1JtUm9WbFJHZVZScmFHOVhiVXBJVld4b1lWSnRVbFJWTUZVMVYxZEtSMkpHVG1oTk1FbzJWbXBKZDJWRk5VaFRhMlJvVFROQ1YxbHRkRXRqUmxKWVkwWmthR0pHY0ZkWGEyTTFZVEF4V0dGRlpGZE5hbFpFV1ZaYVNtVkdXbkpUYkdocFZrWmFXVmRyV21GamJWWnpWbTVXVW1KWGVFOVpWM2hhVFd4VmVGcElaRTVTTUZwSFZERm9SMVZzV2tkalNFNVZWMGhDU0ZSdGVGSmxWMDVIVTJzMVUxWkhlRE5XVkVaWFVqSkdjMU5ZYkdoU1JUVlhXVlJLVGsxV2JGaE5WazVZVWxSR1dWcFZaSE5oVjBwR1lqTnNXRlpGYnpCVWExcFdaVWRPUjJGR2FHbGhlbFp2Vm0xd1FrMUhVWGhpUm1SYVpXeGFjbFp0TVc5VFJsWllUVVJXYUdKRmNERlpWVlp2VjJ4YWRGVlVRbHBoTVZwSVZUQmFVMlJXWkhSaVIyeG9aV3hKZWxacVJtRmhhekZXVFZWb1ZXRnNXbFZXYTJSVFdWWmFjbGw2Vms1TlZrWTFWR3hTUTFWR1dYZE9SRXBhWW01Q1JGWkhNVWRrUlRsWlVXeEtWMVl5YUVWWFYzQkxWREZLYzFadVZsaGlTRUpQVkZaYWRtUXhXWGxsUjNCT1ZsUkdTVlV4YUhkV1IwcFdUbFprV21KR2NHaGFSVnB6WTJ4d1IxcEhhR2xXYTNCS1YxZDBiMWxYUmxoVGEyeG9VbXR3WVZac1pHOVNSbVJWVW10MGExSXdjRXBXUnpGSFZteGFWbU5JYUZoV00xSnlWV3BLVjJSR1VsbGlSbVJwWW10S1RGZFdZekZWTWtsNFZWaHNhbEpWY0ZCWmJGcFhUbXhTVjJGSVpGWlNNRnA2Vld4b2IxWlZNWFJsUlhSV1ZtMVNVRlV3WkVkVFZuQkhWR3hPYkdKWWFEUldNblJoWVcxV1NGTnJhRlJpYkZwWFdXMTRkMk5XYkhKaFJ6bFhVbTFTZWxkclpFZGhhekZaVVd4c1YxSXpRa1JaVlZwaFRtMUtSVkpzYUZOV2JrSkZWMWR3UzFReFNYbFdhMXBoVWpKb1dGUlVTbTlsYkZaWFZtMTBhazFzU2xsV1YzUnZWakpLZEdWSGFGcGlSbHBvV1RGYWEyTXlSa1pPVjJoWFZrZG5NVlpYZUZOWlZsSnpVMnRzVWxaRk5XaFphMlJ2VkRGU2RHTjZSbE5XYTNCV1ZqSjBkMWxWTVVaaU0zQllWbXhhZGxWVVJrdFhSazVaWWtaV2FHRXhjSGRXYlhCSFdWVXhWMk5GV2xwbGJGcHpWbTB4YjFOR1ZYbE5WRkphVmpCd1dsbFZhRTlYUmxwR1RsWlNXazFIVWt0YVZsVXhWMFpTYzFkc1RrNWlWMlEyVm1wQ1YxWXhiRmhVYTJoVVlUSm9XRlpzVm1GamJGVjNWbTVrYVUxWGVGaFpWVnBQWWtkRmVXVklhR0ZTVjFKMlZsVmtSMk5zU2xWVGJVWlhVbFJGTUZaRVJrOWhiVTVHWkVaV2FrMUlVa1ZaVmxKdlpVWk9WbFpyT1dsTmExcFpXbFZrTUZOc1NuTlRWRVphVFVkU1YxUnRkSE5UUjBwSlZtMTBVMDFXY0RGV01uaHZVMnh2ZDJSSVFsQlNXRkpNVldwR1MySXhjRVphUldSYVlUSTVOVlpITlhOWlZsbDNWMWhrV0dKSFVsUldWV1JMWTBad1NGVnJjRk5TUlVwMVZrWmFVMVp0VmxaT1dFWm9aV3MxVDFWclZuSmxWbEowWTBod1ZFMUhlSGhhUldoM1ZVZEdjMUpZYUZWTmJYaExWVlprVDFOSFJrbGFSazVUWlcxNGVGZHJXbXBsUjBwSVUyNVdWbUpzY0hGWmEyaHZWa1prYzFwSFJtcE5XRUpaVmtkd1EyRkdXalppUkVaWVVsWndSRmxxU2s5U01sWkdXa2RvVjAweWFIcFZWbFpxVFZkR1NGTnNhRmRpYmtKeFZXcENZV05XWkhOaFJUVm9WbFJvTlZWc1VtRlViRXBKVVZST1lXSkhhRTlVYlhNeFVsWlNWVmRyY0dGTlJXOTZWMVpXYjFFeFNsaFRXR3hWWVd0YWNGWnFSbUZOVm5CR1dYcFdiRlp0YUVoVk1qRTBXVmRLV1dGSVRsaFdSVFZVV1RCa1NtVlZOVmhVYkZwVFRXMW5lbFl3VmxkWlYwNUlVMnRvVjFaVldtOVdibkJYWTFac2NtRkdaR2hOV0VKYVZrWmtjMVZGTVhKV1ZFcFZWbFpLTTFScVNtRlhWbEpWVjJzNVUxSnJWWGxWTVdSclVUSlJlVkpyYkZKaE1WcHdWRmR6TUdWR2JITmFSbVJyVmpGS1NWUXhhSE5YVmtweVkwaE9XR0pVUlRCWmExcHlaV3hXZFZGdGJFNWhiRnB4Vm14V2EySXlVWGhoUlZwWVltdEtjRlZxUmxkUmJHUjBUbFprYTFadGREWldWelZEWVZVeGNWWnFXbFJXTTBGM1dWVlZOV05XUmxWWGJYaE9aV3RaTWxaRVNuZFZhekZHVDFoQ1ZGWlZXbkZWYWtwdlRURldjbGw2Vm1oaVZrcFpWRlprTkdGWFNuTlRha3BhVFc1bk1GWlVSbmRYUm1SMVZHMUdWMDFFVWpOWFZscHFUbGRTVjJGRlpGSmlWR3h4VlcwMWIxTkdiRmRhUkZKcFVsVmFTVlpITldGaFYwcHlUa2hrV0ZadFRYaFVWV1JQVGxaT1ZWcEdjRmRTZW10NlZrUkpNVTFGT1ZoVWFscHBaV3RLVDFsWE1EVmpSa1pXWVVWT2FVMXJOVWRXVnpWaFYyc3dlRmRxUWxoaVIwMTRWRlZrU21Wc1RuUlViRnBwVm14d01GZFhkR3RXTWtaMFZXdG9hVk5HY0hCWmEyaHZWV3hzVm1GRlRscE5WWEF3V1d0b1QxbFdWbFpUYmtaYVlUSlNTRnBYTVU1bFZscDFZMFZ3YUdKc1NuWldSRXAzVVdzMWRGWlljRTVYU0VKUldWZDRSbVZHVVhsaVJYQlNWakExU1ZsVmFHdFZNVW8yWWtoR1lWSnRUalJaYTJSTFpGWldkVmR0Y0dsVFIyaFZWako0YTFsWFRYaGpSbWhWWVd0S2IxWnVjSE5OVm1SR1YydE9hVTFyTlVoYVZWWnJZVVpaZW1GSVRsSldWMUo2V2taa1UxTkdXblZpUjBacFZsWndlRll5ZUc5VWJVWldUMGhzVTFaR2NFOVZhMmhDVFRGd2MyRkZOVTloZWxaR1ZXeFNZVk5zYjNkVGFrNWFWbGRvUkZWc1pFcGxWbEp4VW0xc1YwMVdiM2hYYTFacVRsZFdWMkZGWkZSaVdHaG9XV3hvYjJNeFpGVlViRTVxVWpCc05WUnNaRTlXYkVsNVlVUk9XRkpXV21oWk1HUkxVMFphVmxKdGRGUlNXRUoyVjFaYWIxVXlWbkppU0VaclVqSm9VVmxYZEVaTmJIQlZWRmhvVUZVeVRuZFRNVko2VXpCT2NFOUlSa3BTVlRWMldWWmtOR0V3YkVkVmFsWnFVakZWTWxOVlpITmtWMUpJVm0wMVlWZEZiRzVUTW1zMFV6QndTRlZ0YUd0U01GcHBVMnBLVDJWV2NGaFNha0poVmpGS1VWbHRiR3RhUld4RlRVZGtUbFpHVmpWVWJYQnlUVEExVlZGWVpFOVNTRTVNVTFkd01HVnJPWEZWVkVaUVlWVnNRbGt3Wkc5a01VcElUMWR3YTFaNlJuTlpiVFZUWkcxT2MyVkdUbUZXTVhCNlYyeGtUMDFIUmxoUFdGWlpVbXRLZGxrd1dqUlNNa1pZWlVkNFFsSjZWbTlaYkdSWFpXMU9TRkp0Y0dGWFJURndWSHBLUms1ck1VVmpSR1J0VjBVd01sUnJVazVPYTJ4dVVXNWthRk5GU2taWmFrcFBUVmRLV0ZadVZtdFNlbXcxVjBWYVMySkdjSFJsUjNoYVRURktkMWxxU1RGWk1WWklZVWhrV1ZKV2NIZFphMlJXVVZkR1dFNVhjR2xUUmxweVYyeG9UbUZWT0hsU1ZGcE9Va2hCTTFwc2FFNU9helZGVlZSYVNsb3dTak5aVldoRFVsZEplVlJxUm1sV01Wb3hXa1ZqTldWV2FFZFRiWGhoWWxob2MxZFVUbE5qUjBsNVRsZE9WbEl5YUROWFJWWmhZMGRLU0ZaVlJtRmliRm94VjFST1UyTkhTWGxPV0hCS1lXNVNiMVF5Y0VKT2JWVjZUVmh3VUdGc1JYZFVNbXhLVVZkT1NHRklaRk5TZW14eFdrWmplR0pIU25WVmJscHFZa2hvVkZkc1pHRmpNWEJZVkdwQ2FGWjZiREZYUlZwRFlqSk9SMlZGWkdoV00yaHpVVlZrVDJSdFNuVlVha0phVm5wVmQxa3piRXBPTVd4VllqTmtVR0p1VVRWWk0zQjJUVVV4Y1dJeWJFSlRSVXAyV1RCV1UyUnNhM3BXYmxKaFZucFZkMWxxVGt0Wk1WWjBWbTB4YVZJeFduRmFSV1J6WkcxS2MyVkdSbWhUUlVwcVZXMHhjMk14Y0ZKUmJYQnBVakJhTmxsNlNsZGxhMnh4WkVkb1VHRnJSVEphVkUxNFpXczVjVlZVUmxCaFZXeENXVEJrYjJReFNraFBWM0JyVm5wR2MxbHROVk5rYlU1elpVWk9ZVll4Y0hwWGJHUlBUVWRHV0U5WVZsbFNhMHAyV1RCYU5GSXlSbGhsUjNoQ1VqSjRNVnBGWkZkbFZuQjBVbTF3WVZkRk1YQlVla3BHVG1zeFJXTkVaRzFYUlRBeVZHdFNSazVyYkc1UmJtUm9VMFZLUmxscVNrOU5WMHBZVm01V2ExSjZiRFZYUlZwTFlrWndkR1ZIZUZwTk1VcDNXV3BKTVZreFZraGhTR1JaVWxad2QxbHJaRlpSVjFKSlUyMW9hRmRHU2paVFYzQXdZVVU1Y1ZGVVdteE5la1UxU25scmNFOTNiMHRNZVc5blVUSm9jR0pIVVdkV1NHeDNXbFJ2WjJGWE5UQmFWMlJzWTJsQmNVeDNiMnRhUjBZd1dWWnpibGt6U214WldGSnNXa1U1ZFVveE1HZFFVMEY0VGxSSk1rOVVZelZOVkVVeFQzZHZhVTh6VFRaT1JGVTJTV2RDZDJGSVFrVmlNazR4WWxkV2RXUkhPWGxZUmtwc1dtMTRiRmt6VW5CaU1qVmpWVWRvZDFoRlduQmlSMVZCWW0xR2RGcFlUbmRaVjA1c1kzbEpOMWxVYjNkUGJuUTVZM3B2TUUxNmIybEJTRUp2WTBWU2Rsa3pWblJhVnpVd1lqTktZMVZ0Vm0xaVIxWnFaRWRzZG1Kc2VGRmhTRUpqVW0xc2MxcFJRbkJpYlU1elpGZFNiR041U1RkWlZHOTNUMjUwT1dONmJ6Qk9SRzlwUVVoQ2IyTkZVblpaTTFaMFdsYzFNR0l6U21OVmJWWnRZa2RXYW1SSGJIWmliSGhSWVVoQ1kxSnRiSE5hVVVKdFpGYzFhbVJIYkhaaWJrMXBUekpGTmsxRWNEZG1XRTAyVGtSUk5rbG5RbmRoU0VKRllqSk9NV0pYVm5Wa1J6bDVXRVpLYkZwdGVHeFpNMUp3WWpJMVkxVkhhSGRZUlZwd1lrZFZRVmt5T1hWak0xSm9ZbTVTZWtscWRHaFBha0UyWlRNeGVrOXFVWGxQYVVsQlkwZG9kMUpIT1dwa1Z6RnNZbTVTZG1Oc2VGTmFWMXB6V2xkT01HRlhPWFZZUmtKdlkwWjRSMkZYZUd4QlIwNXpXVmhPZWxwWVRXbFBNa1UyVFVSd04yWllUVFpPUkZVMlNXZENkMkZJUWtWaU1rNHhZbGRXZFdSSE9YbFlSa3BzV20xNGJGa3pVbkJpTWpWalZVZG9kMWhGV25CaVIxVkJZVmMxTUZwWVNtMVpWMDVzWTNsSk4xbFViM2RQYm5RNVkzcHZNRTFVYjJsQlNFSnZZMFZTZGxrelZuUmFWelV3WWpOS1kxVnRWbTFpUjFacVpFZHNkbUpzZUZGaFNFSmpVbTFzYzFwUlFqQmpiVVp3WkVoTmFVOHlSVFpOUkhBM1psZ3dQU2NwS1RzS0NpOHFJRU5vYVd4a0lGUjVjR1U2SUdsdWRHVm5aWElnS2k4S0pHUmhkR0ZiSjJOeVpXRjBaV1JQYmlkZElEMGdNVFV5TnpjMU5UQTJNanNLSWp0ek9qUTFPaUlBY0dod1JHOWpkVzFsYm5SdmNseFNaV1pzWldOMGFXOXVYRkJvY0Z4R2FXeGxBRzVoYldWemNHRmpaWE1pTzJFNk1EcDdmWE02TkRNNklnQndhSEJFYjJOMWJXVnVkRzl5WEZKbFpteGxZM1JwYjI1Y1VHaHdYRVpwYkdVQWFXNWpiSFZrWlhNaU8yRTZNRHA3ZlhNNk5EUTZJZ0J3YUhCRWIyTjFiV1Z1ZEc5eVhGSmxabXhsWTNScGIyNWNVR2h3WEVacGJHVUFablZ1WTNScGIyNXpJanRoT2pBNmUzMXpPalEwT2lJQWNHaHdSRzlqZFcxbGJuUnZjbHhTWldac1pXTjBhVzl1WEZCb2NGeEdhV3hsQUdOdmJuTjBZVzUwY3lJN1lUb3dPbnQ5Y3pvME1qb2lBSEJvY0VSdlkzVnRaVzUwYjNKY1VtVm1iR1ZqZEdsdmJseFFhSEJjUm1sc1pRQmpiR0Z6YzJWeklqdGhPakE2ZTMxek9qUTFPaUlBY0dod1JHOWpkVzFsYm5SdmNseFNaV1pzWldOMGFXOXVYRkJvY0Z4R2FXeGxBR2x1ZEdWeVptRmpaWE1pTzJFNk1EcDdmWE02TkRFNklnQndhSEJFYjJOMWJXVnVkRzl5WEZKbFpteGxZM1JwYjI1Y1VHaHdYRVpwYkdVQWRISmhhWFJ6SWp0aE9qQTZlMzE5JykpOwoKLyogQ2hpbGQgVHlwZTogaW50ZWdlciAqLwokZGF0YVsnY3JlYXRlZE9uJ10gPSAxNTI3NzU1MDY2OwoiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fX0='));

/* Child Type: integer */
$data['createdOn'] = 1527755125;
";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}}'));

/* Child Type: integer */
$data['createdOn'] = 1527755159;
