<?php 
/* Cachekey: cache/stash_default/documentation\api\php\adb29a8c858ac1322e6636b462ba8b88/ */
/* Type: array */
/* Expiration: 2018-05-26T14:06:53+00:00 */



$loaded = true;
$expiration = 1527343613;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1526970286;
