<?php 
/* Cachekey: cache/stash_default/documentation\api\php\b8eb25fb48a34bf6460a1b4245b898c3/ */
/* Type: array */
/* Expiration: 2018-06-05T00:06:55+00:00 */



$loaded = true;
$expiration = 1528157215;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1527755151;
