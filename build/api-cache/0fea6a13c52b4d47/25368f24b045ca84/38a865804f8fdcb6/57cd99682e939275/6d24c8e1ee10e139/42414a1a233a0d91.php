<?php 
/* Cachekey: cache/stash_default/documentation\api\php\6e56743009ce1bfd222f3a0528c25528/ */
/* Type: array */
/* Expiration: 2018-06-04T19:34:15+00:00 */



$loaded = true;
$expiration = 1528140855;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1527755156;
