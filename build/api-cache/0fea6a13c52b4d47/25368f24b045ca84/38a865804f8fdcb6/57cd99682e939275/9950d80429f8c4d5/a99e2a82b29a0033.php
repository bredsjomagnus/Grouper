<?php 
/* Cachekey: cache/stash_default/documentation\api\php\8cefe88c09278b1bfa39a8aeae4cc67e/ */
/* Type: array */
/* Expiration: 2018-05-27T02:06:17+00:00 */



$loaded = true;
$expiration = 1527386777;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1526979197;
