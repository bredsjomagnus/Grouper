<?php 
/* Cachekey: cache/stash_default/documentation\api\php\d705cf21ba390d80ecf0f403c589516d/ */
/* Type: array */
/* Expiration: 2018-06-05T05:33:07+00:00 */



$loaded = true;
$expiration = 1528176787;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1527755126;
