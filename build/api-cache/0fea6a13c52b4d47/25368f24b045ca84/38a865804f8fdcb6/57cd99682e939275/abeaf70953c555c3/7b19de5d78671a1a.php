<?php 
/* Cachekey: cache/stash_default/documentation\api\php\f314a322171a61bfe1a7c10a1a49d298/ */
/* Type: array */
/* Expiration: 2018-06-04T23:22:39+00:00 */



$loaded = true;
$expiration = 1528154559;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1527755127;
