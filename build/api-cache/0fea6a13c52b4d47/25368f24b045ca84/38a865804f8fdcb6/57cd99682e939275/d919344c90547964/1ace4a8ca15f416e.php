<?php 
/* Cachekey: cache/stash_default/documentation\api\php\f5c396e2a50fd3e1bb52afbaade64d75/ */
/* Type: array */
/* Expiration: 2018-06-04T17:12:07+00:00 */



$loaded = true;
$expiration = 1528132327;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1527755159;
