<?php 
/* Cachekey: cache/stash_default/documentation\api\php\1aa0d99f1c5ec4f37718a1f2fe864232/ */
/* Type: array */
/* Expiration: 2018-05-26T13:29:32+00:00 */



$loaded = true;
$expiration = 1527341372;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1526970279;
